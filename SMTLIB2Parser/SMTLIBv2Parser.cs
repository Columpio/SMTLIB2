//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/columpio/RiderProjects/SMTLIB2/smtlibv2-grammar/src/main/resources/SMTLIBv2.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SMTLIB2Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class SMTLIBv2Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		Comment=1, ParOpen=2, ParClose=3, Semicolon=4, String=5, QuotedSymbol=6, 
		PS_Not=7, PS_Bool=8, PS_ContinuedExecution=9, PS_Error=10, PS_False=11, 
		PS_ImmediateExit=12, PS_Incomplete=13, PS_Logic=14, PS_Memout=15, PS_Sat=16, 
		PS_Success=17, PS_Theory=18, PS_True=19, PS_Unknown=20, PS_Unsupported=21, 
		PS_Unsat=22, CMD_Assert=23, CMD_CheckSat=24, CMD_CheckSatAssuming=25, 
		CMD_DeclareConst=26, CMD_DeclareDatatype=27, CMD_DeclareDatatypes=28, 
		CMD_DeclareFun=29, CMD_DeclareSort=30, CMD_DefineFun=31, CMD_DefineFunRec=32, 
		CMD_DefineFunsRec=33, CMD_DefineSort=34, CMD_Echo=35, CMD_Exit=36, CMD_GetAssertions=37, 
		CMD_GetAssignment=38, CMD_GetInfo=39, CMD_GetModel=40, CMD_GetOption=41, 
		CMD_GetProof=42, CMD_GetUnsatAssumptions=43, CMD_GetUnsatCore=44, CMD_GetValue=45, 
		CMD_Lemma=46, CMD_Pop=47, CMD_Push=48, CMD_Reset=49, CMD_ResetAssertions=50, 
		CMD_SetInfo=51, CMD_SetLogic=52, CMD_SetOption=53, GRW_Exclamation=54, 
		GRW_Underscore=55, GRW_As=56, GRW_Binary=57, GRW_Decimal=58, GRW_Exists=59, 
		GRW_Hexadecimal=60, GRW_Forall=61, GRW_Let=62, GRW_Match=63, GRW_Numeral=64, 
		GRW_Par=65, GRW_String=66, Numeral=67, Binary=68, HexDecimal=69, Decimal=70, 
		Colon=71, PK_AllStatistics=72, PK_AssertionStackLevels=73, PK_Authors=74, 
		PK_Category=75, PK_Chainable=76, PK_Definition=77, PK_DiagnosticOutputChannel=78, 
		PK_ErrorBehaviour=79, PK_Extension=80, PK_Funs=81, PK_FunsDescription=82, 
		PK_GlobalDeclarations=83, PK_InteractiveMode=84, PK_Language=85, PK_LeftAssoc=86, 
		PK_License=87, PK_Named=88, PK_Name=89, PK_Notes=90, PK_Pattern=91, PK_PrintSuccess=92, 
		PK_ProduceAssertions=93, PK_ProduceAssignments=94, PK_ProduceModels=95, 
		PK_ProduceProofs=96, PK_ProduceUnsatAssumptions=97, PK_ProduceUnsatCores=98, 
		PK_RandomSeed=99, PK_ReasonUnknown=100, PK_RegularOutputChannel=101, PK_ReproducibleResourceLimit=102, 
		PK_RightAssoc=103, PK_SmtLibVersion=104, PK_Sorts=105, PK_SortsDescription=106, 
		PK_Source=107, PK_Status=108, PK_Theories=109, PK_Values=110, PK_Verbosity=111, 
		PK_Version=112, UndefinedSymbol=113, WS=114;
	public const int
		RULE_start = 0, RULE_response = 1, RULE_generalReservedWord = 2, RULE_simpleSymbol = 3, 
		RULE_quotedSymbol = 4, RULE_predefSymbol = 5, RULE_predefKeyword = 6, 
		RULE_symbol = 7, RULE_numeral = 8, RULE_decimal = 9, RULE_hexadecimal = 10, 
		RULE_binary = 11, RULE_string = 12, RULE_keyword = 13, RULE_spec_constant = 14, 
		RULE_s_expr = 15, RULE_index = 16, RULE_identifier = 17, RULE_attribute_value = 18, 
		RULE_attribute = 19, RULE_sort = 20, RULE_qual_identifier = 21, RULE_var_binding = 22, 
		RULE_sorted_var = 23, RULE_pattern = 24, RULE_match_case = 25, RULE_term = 26, 
		RULE_sort_symbol_decl = 27, RULE_meta_spec_constant = 28, RULE_fun_symbol_decl = 29, 
		RULE_par_fun_symbol_decl = 30, RULE_theory_attribute = 31, RULE_theory_decl = 32, 
		RULE_logic_attribue = 33, RULE_logic = 34, RULE_sort_dec = 35, RULE_selector_dec = 36, 
		RULE_constructor_dec = 37, RULE_datatype_dec = 38, RULE_function_dec = 39, 
		RULE_function_def = 40, RULE_prop_literal = 41, RULE_script = 42, RULE_cmd_assert = 43, 
		RULE_cmd_checkSat = 44, RULE_cmd_checkSatAssuming = 45, RULE_cmd_declareConst = 46, 
		RULE_cmd_declareDatatype = 47, RULE_cmd_declareDatatypes = 48, RULE_cmd_declareFun = 49, 
		RULE_cmd_declareSort = 50, RULE_cmd_defineFun = 51, RULE_cmd_defineFunRec = 52, 
		RULE_cmd_defineFunsRec = 53, RULE_cmd_defineSort = 54, RULE_cmd_echo = 55, 
		RULE_cmd_exit = 56, RULE_cmd_getAssertions = 57, RULE_cmd_getAssignment = 58, 
		RULE_cmd_getInfo = 59, RULE_cmd_getModel = 60, RULE_cmd_getOption = 61, 
		RULE_cmd_getProof = 62, RULE_cmd_getUnsatAssumptions = 63, RULE_cmd_getUnsatCore = 64, 
		RULE_cmd_getValue = 65, RULE_cmd_lemma = 66, RULE_cmd_pop = 67, RULE_cmd_push = 68, 
		RULE_cmd_reset = 69, RULE_cmd_resetAssertions = 70, RULE_cmd_setInfo = 71, 
		RULE_cmd_setLogic = 72, RULE_cmd_setOption = 73, RULE_command = 74, RULE_b_value = 75, 
		RULE_option = 76, RULE_info_flag = 77, RULE_error_behaviour = 78, RULE_reason_unknown = 79, 
		RULE_model_response = 80, RULE_info_response = 81, RULE_valuation_pair = 82, 
		RULE_t_valuation_pair = 83, RULE_check_sat_response = 84, RULE_echo_response = 85, 
		RULE_get_assertions_response = 86, RULE_get_assignment_response = 87, 
		RULE_get_info_response = 88, RULE_get_model_response = 89, RULE_get_option_response = 90, 
		RULE_get_proof_response = 91, RULE_get_unsat_assump_response = 92, RULE_get_unsat_core_response = 93, 
		RULE_get_value_response = 94, RULE_specific_success_response = 95, RULE_general_response = 96;
	public static readonly string[] ruleNames = {
		"start", "response", "generalReservedWord", "simpleSymbol", "quotedSymbol", 
		"predefSymbol", "predefKeyword", "symbol", "numeral", "decimal", "hexadecimal", 
		"binary", "string", "keyword", "spec_constant", "s_expr", "index", "identifier", 
		"attribute_value", "attribute", "sort", "qual_identifier", "var_binding", 
		"sorted_var", "pattern", "match_case", "term", "sort_symbol_decl", "meta_spec_constant", 
		"fun_symbol_decl", "par_fun_symbol_decl", "theory_attribute", "theory_decl", 
		"logic_attribue", "logic", "sort_dec", "selector_dec", "constructor_dec", 
		"datatype_dec", "function_dec", "function_def", "prop_literal", "script", 
		"cmd_assert", "cmd_checkSat", "cmd_checkSatAssuming", "cmd_declareConst", 
		"cmd_declareDatatype", "cmd_declareDatatypes", "cmd_declareFun", "cmd_declareSort", 
		"cmd_defineFun", "cmd_defineFunRec", "cmd_defineFunsRec", "cmd_defineSort", 
		"cmd_echo", "cmd_exit", "cmd_getAssertions", "cmd_getAssignment", "cmd_getInfo", 
		"cmd_getModel", "cmd_getOption", "cmd_getProof", "cmd_getUnsatAssumptions", 
		"cmd_getUnsatCore", "cmd_getValue", "cmd_lemma", "cmd_pop", "cmd_push", 
		"cmd_reset", "cmd_resetAssertions", "cmd_setInfo", "cmd_setLogic", "cmd_setOption", 
		"command", "b_value", "option", "info_flag", "error_behaviour", "reason_unknown", 
		"model_response", "info_response", "valuation_pair", "t_valuation_pair", 
		"check_sat_response", "echo_response", "get_assertions_response", "get_assignment_response", 
		"get_info_response", "get_model_response", "get_option_response", "get_proof_response", 
		"get_unsat_assump_response", "get_unsat_core_response", "get_value_response", 
		"specific_success_response", "general_response"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "'('", "')'", "';'", null, null, "'not'", "'Bool'", "'continued-execution'", 
		"'error'", "'false'", "'immediate-exit'", "'incomplete'", "'logic'", "'memout'", 
		"'sat'", "'success'", "'theory'", "'true'", "'unknown'", "'unsupported'", 
		"'unsat'", "'assert'", "'check-sat'", "'check-sat-assuming'", "'declare-const'", 
		"'declare-datatype'", "'declare-datatypes'", "'declare-fun'", "'declare-sort'", 
		"'define-fun'", "'define-fun-rec'", "'define-funs-rec'", "'define-sort'", 
		"'echo'", "'exit'", "'get-assertions'", "'get-assignment'", "'get-info'", 
		"'get-model'", "'get-option'", "'get-proof'", "'get-unsat-assumptions'", 
		"'get-unsat-core'", "'get-value'", "'lemma'", "'pop'", "'push'", "'reset'", 
		"'reset-assertions'", "'set-info'", "'set-logic'", "'set-option'", "'!'", 
		"'_'", "'as'", "'BINARY'", "'DECIMAL'", "'exists'", "'HEXADECIMAL'", "'forall'", 
		"'let'", "'match'", "'NUMERAL'", "'par'", "'string'", null, null, null, 
		null, "':'", "':all-statistics'", "':assertion-stack-levels'", "':authors'", 
		"':category'", "':chainable'", "':definition'", "':diagnostic-output-channel'", 
		"':error-behavior'", "':extensions'", "':funs'", "':funs-description'", 
		"':global-declarations'", "':interactive-mode'", "':language'", "':left-assoc'", 
		"':license'", "':named'", "':name'", "':notes'", "':pattern'", "':print-success'", 
		"':produce-assertions'", "':produce-assignments'", "':produce-models'", 
		"':produce-proofs'", "':produce-unsat-assumptions'", "':produce-unsat-cores'", 
		"':random-seed'", "':reason-unknown'", "':regular-output-channel'", "':reproducible-resource-limit'", 
		"':right-assoc'", "':smt-lib-version'", "':sorts'", "':sorts-description'", 
		"':source'", "':status'", "':theories'", "':values'", "':verbosity'", 
		"':version'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Comment", "ParOpen", "ParClose", "Semicolon", "String", "QuotedSymbol", 
		"PS_Not", "PS_Bool", "PS_ContinuedExecution", "PS_Error", "PS_False", 
		"PS_ImmediateExit", "PS_Incomplete", "PS_Logic", "PS_Memout", "PS_Sat", 
		"PS_Success", "PS_Theory", "PS_True", "PS_Unknown", "PS_Unsupported", 
		"PS_Unsat", "CMD_Assert", "CMD_CheckSat", "CMD_CheckSatAssuming", "CMD_DeclareConst", 
		"CMD_DeclareDatatype", "CMD_DeclareDatatypes", "CMD_DeclareFun", "CMD_DeclareSort", 
		"CMD_DefineFun", "CMD_DefineFunRec", "CMD_DefineFunsRec", "CMD_DefineSort", 
		"CMD_Echo", "CMD_Exit", "CMD_GetAssertions", "CMD_GetAssignment", "CMD_GetInfo", 
		"CMD_GetModel", "CMD_GetOption", "CMD_GetProof", "CMD_GetUnsatAssumptions", 
		"CMD_GetUnsatCore", "CMD_GetValue", "CMD_Lemma", "CMD_Pop", "CMD_Push", 
		"CMD_Reset", "CMD_ResetAssertions", "CMD_SetInfo", "CMD_SetLogic", "CMD_SetOption", 
		"GRW_Exclamation", "GRW_Underscore", "GRW_As", "GRW_Binary", "GRW_Decimal", 
		"GRW_Exists", "GRW_Hexadecimal", "GRW_Forall", "GRW_Let", "GRW_Match", 
		"GRW_Numeral", "GRW_Par", "GRW_String", "Numeral", "Binary", "HexDecimal", 
		"Decimal", "Colon", "PK_AllStatistics", "PK_AssertionStackLevels", "PK_Authors", 
		"PK_Category", "PK_Chainable", "PK_Definition", "PK_DiagnosticOutputChannel", 
		"PK_ErrorBehaviour", "PK_Extension", "PK_Funs", "PK_FunsDescription", 
		"PK_GlobalDeclarations", "PK_InteractiveMode", "PK_Language", "PK_LeftAssoc", 
		"PK_License", "PK_Named", "PK_Name", "PK_Notes", "PK_Pattern", "PK_PrintSuccess", 
		"PK_ProduceAssertions", "PK_ProduceAssignments", "PK_ProduceModels", "PK_ProduceProofs", 
		"PK_ProduceUnsatAssumptions", "PK_ProduceUnsatCores", "PK_RandomSeed", 
		"PK_ReasonUnknown", "PK_RegularOutputChannel", "PK_ReproducibleResourceLimit", 
		"PK_RightAssoc", "PK_SmtLibVersion", "PK_Sorts", "PK_SortsDescription", 
		"PK_Source", "PK_Status", "PK_Theories", "PK_Values", "PK_Verbosity", 
		"PK_Version", "UndefinedSymbol", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SMTLIBv2.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SMTLIBv2Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SMTLIBv2Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SMTLIBv2Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ScriptContext script() {
			return GetRuleContext<ScriptContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SMTLIBv2Parser.Eof, 0); }
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 194;
			script();
			State = 195;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResponseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public General_responseContext general_response() {
			return GetRuleContext<General_responseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(SMTLIBv2Parser.Eof, 0); }
		public ResponseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_response; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterResponse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitResponse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResponse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResponseContext response() {
		ResponseContext _localctx = new ResponseContext(Context, State);
		EnterRule(_localctx, 2, RULE_response);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			general_response();
			State = 198;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeneralReservedWordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_Exclamation() { return GetToken(SMTLIBv2Parser.GRW_Exclamation, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_Underscore() { return GetToken(SMTLIBv2Parser.GRW_Underscore, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_As() { return GetToken(SMTLIBv2Parser.GRW_As, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_Binary() { return GetToken(SMTLIBv2Parser.GRW_Binary, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_Decimal() { return GetToken(SMTLIBv2Parser.GRW_Decimal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_Exists() { return GetToken(SMTLIBv2Parser.GRW_Exists, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_Hexadecimal() { return GetToken(SMTLIBv2Parser.GRW_Hexadecimal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_Forall() { return GetToken(SMTLIBv2Parser.GRW_Forall, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_Let() { return GetToken(SMTLIBv2Parser.GRW_Let, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_Match() { return GetToken(SMTLIBv2Parser.GRW_Match, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_Numeral() { return GetToken(SMTLIBv2Parser.GRW_Numeral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_Par() { return GetToken(SMTLIBv2Parser.GRW_Par, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_String() { return GetToken(SMTLIBv2Parser.GRW_String, 0); }
		public GeneralReservedWordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generalReservedWord; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterGeneralReservedWord(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitGeneralReservedWord(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneralReservedWord(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GeneralReservedWordContext generalReservedWord() {
		GeneralReservedWordContext _localctx = new GeneralReservedWordContext(Context, State);
		EnterRule(_localctx, 4, RULE_generalReservedWord);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 54)) & ~0x3f) == 0 && ((1L << (_la - 54)) & ((1L << (GRW_Exclamation - 54)) | (1L << (GRW_Underscore - 54)) | (1L << (GRW_As - 54)) | (1L << (GRW_Binary - 54)) | (1L << (GRW_Decimal - 54)) | (1L << (GRW_Exists - 54)) | (1L << (GRW_Hexadecimal - 54)) | (1L << (GRW_Forall - 54)) | (1L << (GRW_Let - 54)) | (1L << (GRW_Match - 54)) | (1L << (GRW_Numeral - 54)) | (1L << (GRW_Par - 54)) | (1L << (GRW_String - 54)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleSymbolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredefSymbolContext predefSymbol() {
			return GetRuleContext<PredefSymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UndefinedSymbol() { return GetToken(SMTLIBv2Parser.UndefinedSymbol, 0); }
		public SimpleSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleSymbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterSimpleSymbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitSimpleSymbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleSymbolContext simpleSymbol() {
		SimpleSymbolContext _localctx = new SimpleSymbolContext(Context, State);
		EnterRule(_localctx, 6, RULE_simpleSymbol);
		try {
			State = 204;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PS_Not:
			case PS_Bool:
			case PS_ContinuedExecution:
			case PS_Error:
			case PS_False:
			case PS_ImmediateExit:
			case PS_Incomplete:
			case PS_Logic:
			case PS_Memout:
			case PS_Sat:
			case PS_Success:
			case PS_Theory:
			case PS_True:
			case PS_Unknown:
			case PS_Unsupported:
			case PS_Unsat:
				EnterOuterAlt(_localctx, 1);
				{
				State = 202;
				predefSymbol();
				}
				break;
			case UndefinedSymbol:
				EnterOuterAlt(_localctx, 2);
				{
				State = 203;
				Match(UndefinedSymbol);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuotedSymbolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuotedSymbol() { return GetToken(SMTLIBv2Parser.QuotedSymbol, 0); }
		public QuotedSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quotedSymbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterQuotedSymbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitQuotedSymbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuotedSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuotedSymbolContext quotedSymbol() {
		QuotedSymbolContext _localctx = new QuotedSymbolContext(Context, State);
		EnterRule(_localctx, 8, RULE_quotedSymbol);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 206;
			Match(QuotedSymbol);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredefSymbolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Not() { return GetToken(SMTLIBv2Parser.PS_Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Bool() { return GetToken(SMTLIBv2Parser.PS_Bool, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_ContinuedExecution() { return GetToken(SMTLIBv2Parser.PS_ContinuedExecution, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Error() { return GetToken(SMTLIBv2Parser.PS_Error, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_False() { return GetToken(SMTLIBv2Parser.PS_False, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_ImmediateExit() { return GetToken(SMTLIBv2Parser.PS_ImmediateExit, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Incomplete() { return GetToken(SMTLIBv2Parser.PS_Incomplete, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Logic() { return GetToken(SMTLIBv2Parser.PS_Logic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Memout() { return GetToken(SMTLIBv2Parser.PS_Memout, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Sat() { return GetToken(SMTLIBv2Parser.PS_Sat, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Success() { return GetToken(SMTLIBv2Parser.PS_Success, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Theory() { return GetToken(SMTLIBv2Parser.PS_Theory, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_True() { return GetToken(SMTLIBv2Parser.PS_True, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Unknown() { return GetToken(SMTLIBv2Parser.PS_Unknown, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Unsupported() { return GetToken(SMTLIBv2Parser.PS_Unsupported, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Unsat() { return GetToken(SMTLIBv2Parser.PS_Unsat, 0); }
		public PredefSymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predefSymbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterPredefSymbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitPredefSymbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredefSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredefSymbolContext predefSymbol() {
		PredefSymbolContext _localctx = new PredefSymbolContext(Context, State);
		EnterRule(_localctx, 10, RULE_predefSymbol);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PS_Not) | (1L << PS_Bool) | (1L << PS_ContinuedExecution) | (1L << PS_Error) | (1L << PS_False) | (1L << PS_ImmediateExit) | (1L << PS_Incomplete) | (1L << PS_Logic) | (1L << PS_Memout) | (1L << PS_Sat) | (1L << PS_Success) | (1L << PS_Theory) | (1L << PS_True) | (1L << PS_Unknown) | (1L << PS_Unsupported) | (1L << PS_Unsat))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredefKeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_AllStatistics() { return GetToken(SMTLIBv2Parser.PK_AllStatistics, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_AssertionStackLevels() { return GetToken(SMTLIBv2Parser.PK_AssertionStackLevels, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Authors() { return GetToken(SMTLIBv2Parser.PK_Authors, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Category() { return GetToken(SMTLIBv2Parser.PK_Category, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Chainable() { return GetToken(SMTLIBv2Parser.PK_Chainable, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Definition() { return GetToken(SMTLIBv2Parser.PK_Definition, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_DiagnosticOutputChannel() { return GetToken(SMTLIBv2Parser.PK_DiagnosticOutputChannel, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_ErrorBehaviour() { return GetToken(SMTLIBv2Parser.PK_ErrorBehaviour, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Extension() { return GetToken(SMTLIBv2Parser.PK_Extension, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Funs() { return GetToken(SMTLIBv2Parser.PK_Funs, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_FunsDescription() { return GetToken(SMTLIBv2Parser.PK_FunsDescription, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_GlobalDeclarations() { return GetToken(SMTLIBv2Parser.PK_GlobalDeclarations, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_InteractiveMode() { return GetToken(SMTLIBv2Parser.PK_InteractiveMode, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Language() { return GetToken(SMTLIBv2Parser.PK_Language, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_LeftAssoc() { return GetToken(SMTLIBv2Parser.PK_LeftAssoc, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_License() { return GetToken(SMTLIBv2Parser.PK_License, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Named() { return GetToken(SMTLIBv2Parser.PK_Named, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Name() { return GetToken(SMTLIBv2Parser.PK_Name, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Notes() { return GetToken(SMTLIBv2Parser.PK_Notes, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Pattern() { return GetToken(SMTLIBv2Parser.PK_Pattern, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_PrintSuccess() { return GetToken(SMTLIBv2Parser.PK_PrintSuccess, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_ProduceAssertions() { return GetToken(SMTLIBv2Parser.PK_ProduceAssertions, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_ProduceAssignments() { return GetToken(SMTLIBv2Parser.PK_ProduceAssignments, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_ProduceModels() { return GetToken(SMTLIBv2Parser.PK_ProduceModels, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_ProduceProofs() { return GetToken(SMTLIBv2Parser.PK_ProduceProofs, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_ProduceUnsatAssumptions() { return GetToken(SMTLIBv2Parser.PK_ProduceUnsatAssumptions, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_ProduceUnsatCores() { return GetToken(SMTLIBv2Parser.PK_ProduceUnsatCores, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_RandomSeed() { return GetToken(SMTLIBv2Parser.PK_RandomSeed, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_ReasonUnknown() { return GetToken(SMTLIBv2Parser.PK_ReasonUnknown, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_RegularOutputChannel() { return GetToken(SMTLIBv2Parser.PK_RegularOutputChannel, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_ReproducibleResourceLimit() { return GetToken(SMTLIBv2Parser.PK_ReproducibleResourceLimit, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_RightAssoc() { return GetToken(SMTLIBv2Parser.PK_RightAssoc, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_SmtLibVersion() { return GetToken(SMTLIBv2Parser.PK_SmtLibVersion, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Sorts() { return GetToken(SMTLIBv2Parser.PK_Sorts, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_SortsDescription() { return GetToken(SMTLIBv2Parser.PK_SortsDescription, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Source() { return GetToken(SMTLIBv2Parser.PK_Source, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Status() { return GetToken(SMTLIBv2Parser.PK_Status, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Theories() { return GetToken(SMTLIBv2Parser.PK_Theories, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Values() { return GetToken(SMTLIBv2Parser.PK_Values, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Verbosity() { return GetToken(SMTLIBv2Parser.PK_Verbosity, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Version() { return GetToken(SMTLIBv2Parser.PK_Version, 0); }
		public PredefKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predefKeyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterPredefKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitPredefKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredefKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredefKeywordContext predefKeyword() {
		PredefKeywordContext _localctx = new PredefKeywordContext(Context, State);
		EnterRule(_localctx, 12, RULE_predefKeyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (PK_AllStatistics - 72)) | (1L << (PK_AssertionStackLevels - 72)) | (1L << (PK_Authors - 72)) | (1L << (PK_Category - 72)) | (1L << (PK_Chainable - 72)) | (1L << (PK_Definition - 72)) | (1L << (PK_DiagnosticOutputChannel - 72)) | (1L << (PK_ErrorBehaviour - 72)) | (1L << (PK_Extension - 72)) | (1L << (PK_Funs - 72)) | (1L << (PK_FunsDescription - 72)) | (1L << (PK_GlobalDeclarations - 72)) | (1L << (PK_InteractiveMode - 72)) | (1L << (PK_Language - 72)) | (1L << (PK_LeftAssoc - 72)) | (1L << (PK_License - 72)) | (1L << (PK_Named - 72)) | (1L << (PK_Name - 72)) | (1L << (PK_Notes - 72)) | (1L << (PK_Pattern - 72)) | (1L << (PK_PrintSuccess - 72)) | (1L << (PK_ProduceAssertions - 72)) | (1L << (PK_ProduceAssignments - 72)) | (1L << (PK_ProduceModels - 72)) | (1L << (PK_ProduceProofs - 72)) | (1L << (PK_ProduceUnsatAssumptions - 72)) | (1L << (PK_ProduceUnsatCores - 72)) | (1L << (PK_RandomSeed - 72)) | (1L << (PK_ReasonUnknown - 72)) | (1L << (PK_RegularOutputChannel - 72)) | (1L << (PK_ReproducibleResourceLimit - 72)) | (1L << (PK_RightAssoc - 72)) | (1L << (PK_SmtLibVersion - 72)) | (1L << (PK_Sorts - 72)) | (1L << (PK_SortsDescription - 72)) | (1L << (PK_Source - 72)) | (1L << (PK_Status - 72)) | (1L << (PK_Theories - 72)) | (1L << (PK_Values - 72)) | (1L << (PK_Verbosity - 72)) | (1L << (PK_Version - 72)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSymbolContext simpleSymbol() {
			return GetRuleContext<SimpleSymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QuotedSymbolContext quotedSymbol() {
			return GetRuleContext<QuotedSymbolContext>(0);
		}
		public SymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterSymbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitSymbol(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSymbol(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SymbolContext symbol() {
		SymbolContext _localctx = new SymbolContext(Context, State);
		EnterRule(_localctx, 14, RULE_symbol);
		try {
			State = 214;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PS_Not:
			case PS_Bool:
			case PS_ContinuedExecution:
			case PS_Error:
			case PS_False:
			case PS_ImmediateExit:
			case PS_Incomplete:
			case PS_Logic:
			case PS_Memout:
			case PS_Sat:
			case PS_Success:
			case PS_Theory:
			case PS_True:
			case PS_Unknown:
			case PS_Unsupported:
			case PS_Unsat:
			case UndefinedSymbol:
				EnterOuterAlt(_localctx, 1);
				{
				State = 212;
				simpleSymbol();
				}
				break;
			case QuotedSymbol:
				EnterOuterAlt(_localctx, 2);
				{
				State = 213;
				quotedSymbol();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumeralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Numeral() { return GetToken(SMTLIBv2Parser.Numeral, 0); }
		public NumeralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numeral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterNumeral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitNumeral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumeral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumeralContext numeral() {
		NumeralContext _localctx = new NumeralContext(Context, State);
		EnterRule(_localctx, 16, RULE_numeral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 216;
			Match(Numeral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecimalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Decimal() { return GetToken(SMTLIBv2Parser.Decimal, 0); }
		public DecimalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decimal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterDecimal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitDecimal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecimal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecimalContext @decimal() {
		DecimalContext _localctx = new DecimalContext(Context, State);
		EnterRule(_localctx, 18, RULE_decimal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 218;
			Match(Decimal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HexadecimalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HexDecimal() { return GetToken(SMTLIBv2Parser.HexDecimal, 0); }
		public HexadecimalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hexadecimal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterHexadecimal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitHexadecimal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHexadecimal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public HexadecimalContext hexadecimal() {
		HexadecimalContext _localctx = new HexadecimalContext(Context, State);
		EnterRule(_localctx, 20, RULE_hexadecimal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			Match(HexDecimal);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BinaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Binary() { return GetToken(SMTLIBv2Parser.Binary, 0); }
		public BinaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterBinary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitBinary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryContext binary() {
		BinaryContext _localctx = new BinaryContext(Context, State);
		EnterRule(_localctx, 22, RULE_binary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			Match(Binary);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode String() { return GetToken(SMTLIBv2Parser.String, 0); }
		public StringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_string; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitString(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringContext @string() {
		StringContext _localctx = new StringContext(Context, State);
		EnterRule(_localctx, 24, RULE_string);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			Match(String);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredefKeywordContext predefKeyword() {
			return GetRuleContext<PredefKeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Colon() { return GetToken(SMTLIBv2Parser.Colon, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleSymbolContext simpleSymbol() {
			return GetRuleContext<SimpleSymbolContext>(0);
		}
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKeyword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 26, RULE_keyword);
		try {
			State = 229;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PK_AllStatistics:
			case PK_AssertionStackLevels:
			case PK_Authors:
			case PK_Category:
			case PK_Chainable:
			case PK_Definition:
			case PK_DiagnosticOutputChannel:
			case PK_ErrorBehaviour:
			case PK_Extension:
			case PK_Funs:
			case PK_FunsDescription:
			case PK_GlobalDeclarations:
			case PK_InteractiveMode:
			case PK_Language:
			case PK_LeftAssoc:
			case PK_License:
			case PK_Named:
			case PK_Name:
			case PK_Notes:
			case PK_Pattern:
			case PK_PrintSuccess:
			case PK_ProduceAssertions:
			case PK_ProduceAssignments:
			case PK_ProduceModels:
			case PK_ProduceProofs:
			case PK_ProduceUnsatAssumptions:
			case PK_ProduceUnsatCores:
			case PK_RandomSeed:
			case PK_ReasonUnknown:
			case PK_RegularOutputChannel:
			case PK_ReproducibleResourceLimit:
			case PK_RightAssoc:
			case PK_SmtLibVersion:
			case PK_Sorts:
			case PK_SortsDescription:
			case PK_Source:
			case PK_Status:
			case PK_Theories:
			case PK_Values:
			case PK_Verbosity:
			case PK_Version:
				EnterOuterAlt(_localctx, 1);
				{
				State = 226;
				predefKeyword();
				}
				break;
			case Colon:
				EnterOuterAlt(_localctx, 2);
				{
				State = 227;
				Match(Colon);
				State = 228;
				simpleSymbol();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Spec_constantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumeralContext numeral() {
			return GetRuleContext<NumeralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecimalContext @decimal() {
			return GetRuleContext<DecimalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HexadecimalContext hexadecimal() {
			return GetRuleContext<HexadecimalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BinaryContext binary() {
			return GetRuleContext<BinaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public Spec_constantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spec_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterSpec_constant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitSpec_constant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpec_constant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Spec_constantContext spec_constant() {
		Spec_constantContext _localctx = new Spec_constantContext(Context, State);
		EnterRule(_localctx, 28, RULE_spec_constant);
		try {
			State = 236;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Numeral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 231;
				numeral();
				}
				break;
			case Decimal:
				EnterOuterAlt(_localctx, 2);
				{
				State = 232;
				@decimal();
				}
				break;
			case HexDecimal:
				EnterOuterAlt(_localctx, 3);
				{
				State = 233;
				hexadecimal();
				}
				break;
			case Binary:
				EnterOuterAlt(_localctx, 4);
				{
				State = 234;
				binary();
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 5);
				{
				State = 235;
				@string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class S_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Spec_constantContext spec_constant() {
			return GetRuleContext<Spec_constantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public S_exprContext[] s_expr() {
			return GetRuleContexts<S_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public S_exprContext s_expr(int i) {
			return GetRuleContext<S_exprContext>(i);
		}
		public S_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_s_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterS_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitS_expr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitS_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public S_exprContext s_expr() {
		S_exprContext _localctx = new S_exprContext(Context, State);
		EnterRule(_localctx, 30, RULE_s_expr);
		int _la;
		try {
			State = 249;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case String:
			case Numeral:
			case Binary:
			case HexDecimal:
			case Decimal:
				EnterOuterAlt(_localctx, 1);
				{
				State = 238;
				spec_constant();
				}
				break;
			case QuotedSymbol:
			case PS_Not:
			case PS_Bool:
			case PS_ContinuedExecution:
			case PS_Error:
			case PS_False:
			case PS_ImmediateExit:
			case PS_Incomplete:
			case PS_Logic:
			case PS_Memout:
			case PS_Sat:
			case PS_Success:
			case PS_Theory:
			case PS_True:
			case PS_Unknown:
			case PS_Unsupported:
			case PS_Unsat:
			case UndefinedSymbol:
				EnterOuterAlt(_localctx, 2);
				{
				State = 239;
				symbol();
				}
				break;
			case Colon:
			case PK_AllStatistics:
			case PK_AssertionStackLevels:
			case PK_Authors:
			case PK_Category:
			case PK_Chainable:
			case PK_Definition:
			case PK_DiagnosticOutputChannel:
			case PK_ErrorBehaviour:
			case PK_Extension:
			case PK_Funs:
			case PK_FunsDescription:
			case PK_GlobalDeclarations:
			case PK_InteractiveMode:
			case PK_Language:
			case PK_LeftAssoc:
			case PK_License:
			case PK_Named:
			case PK_Name:
			case PK_Notes:
			case PK_Pattern:
			case PK_PrintSuccess:
			case PK_ProduceAssertions:
			case PK_ProduceAssignments:
			case PK_ProduceModels:
			case PK_ProduceProofs:
			case PK_ProduceUnsatAssumptions:
			case PK_ProduceUnsatCores:
			case PK_RandomSeed:
			case PK_ReasonUnknown:
			case PK_RegularOutputChannel:
			case PK_ReproducibleResourceLimit:
			case PK_RightAssoc:
			case PK_SmtLibVersion:
			case PK_Sorts:
			case PK_SortsDescription:
			case PK_Source:
			case PK_Status:
			case PK_Theories:
			case PK_Values:
			case PK_Verbosity:
			case PK_Version:
				EnterOuterAlt(_localctx, 3);
				{
				State = 240;
				keyword();
				}
				break;
			case ParOpen:
				EnterOuterAlt(_localctx, 4);
				{
				State = 241;
				Match(ParOpen);
				State = 245;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ParOpen) | (1L << String) | (1L << QuotedSymbol) | (1L << PS_Not) | (1L << PS_Bool) | (1L << PS_ContinuedExecution) | (1L << PS_Error) | (1L << PS_False) | (1L << PS_ImmediateExit) | (1L << PS_Incomplete) | (1L << PS_Logic) | (1L << PS_Memout) | (1L << PS_Sat) | (1L << PS_Success) | (1L << PS_Theory) | (1L << PS_True) | (1L << PS_Unknown) | (1L << PS_Unsupported) | (1L << PS_Unsat))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (Numeral - 67)) | (1L << (Binary - 67)) | (1L << (HexDecimal - 67)) | (1L << (Decimal - 67)) | (1L << (Colon - 67)) | (1L << (PK_AllStatistics - 67)) | (1L << (PK_AssertionStackLevels - 67)) | (1L << (PK_Authors - 67)) | (1L << (PK_Category - 67)) | (1L << (PK_Chainable - 67)) | (1L << (PK_Definition - 67)) | (1L << (PK_DiagnosticOutputChannel - 67)) | (1L << (PK_ErrorBehaviour - 67)) | (1L << (PK_Extension - 67)) | (1L << (PK_Funs - 67)) | (1L << (PK_FunsDescription - 67)) | (1L << (PK_GlobalDeclarations - 67)) | (1L << (PK_InteractiveMode - 67)) | (1L << (PK_Language - 67)) | (1L << (PK_LeftAssoc - 67)) | (1L << (PK_License - 67)) | (1L << (PK_Named - 67)) | (1L << (PK_Name - 67)) | (1L << (PK_Notes - 67)) | (1L << (PK_Pattern - 67)) | (1L << (PK_PrintSuccess - 67)) | (1L << (PK_ProduceAssertions - 67)) | (1L << (PK_ProduceAssignments - 67)) | (1L << (PK_ProduceModels - 67)) | (1L << (PK_ProduceProofs - 67)) | (1L << (PK_ProduceUnsatAssumptions - 67)) | (1L << (PK_ProduceUnsatCores - 67)) | (1L << (PK_RandomSeed - 67)) | (1L << (PK_ReasonUnknown - 67)) | (1L << (PK_RegularOutputChannel - 67)) | (1L << (PK_ReproducibleResourceLimit - 67)) | (1L << (PK_RightAssoc - 67)) | (1L << (PK_SmtLibVersion - 67)) | (1L << (PK_Sorts - 67)) | (1L << (PK_SortsDescription - 67)) | (1L << (PK_Source - 67)) | (1L << (PK_Status - 67)) | (1L << (PK_Theories - 67)) | (1L << (PK_Values - 67)) | (1L << (PK_Verbosity - 67)) | (1L << (PK_Version - 67)) | (1L << (UndefinedSymbol - 67)))) != 0)) {
					{
					{
					State = 242;
					s_expr();
					}
					}
					State = 247;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 248;
				Match(ParClose);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumeralContext numeral() {
			return GetRuleContext<NumeralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		public IndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_index; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IndexContext index() {
		IndexContext _localctx = new IndexContext(Context, State);
		EnterRule(_localctx, 32, RULE_index);
		try {
			State = 253;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Numeral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 251;
				numeral();
				}
				break;
			case QuotedSymbol:
			case PS_Not:
			case PS_Bool:
			case PS_ContinuedExecution:
			case PS_Error:
			case PS_False:
			case PS_ImmediateExit:
			case PS_Incomplete:
			case PS_Logic:
			case PS_Memout:
			case PS_Sat:
			case PS_Success:
			case PS_Theory:
			case PS_True:
			case PS_Unknown:
			case PS_Unsupported:
			case PS_Unsat:
			case UndefinedSymbol:
				EnterOuterAlt(_localctx, 2);
				{
				State = 252;
				symbol();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_Underscore() { return GetToken(SMTLIBv2Parser.GRW_Underscore, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext[] index() {
			return GetRuleContexts<IndexContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexContext index(int i) {
			return GetRuleContext<IndexContext>(i);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 34, RULE_identifier);
		int _la;
		try {
			State = 266;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case QuotedSymbol:
			case PS_Not:
			case PS_Bool:
			case PS_ContinuedExecution:
			case PS_Error:
			case PS_False:
			case PS_ImmediateExit:
			case PS_Incomplete:
			case PS_Logic:
			case PS_Memout:
			case PS_Sat:
			case PS_Success:
			case PS_Theory:
			case PS_True:
			case PS_Unknown:
			case PS_Unsupported:
			case PS_Unsat:
			case UndefinedSymbol:
				EnterOuterAlt(_localctx, 1);
				{
				State = 255;
				symbol();
				}
				break;
			case ParOpen:
				EnterOuterAlt(_localctx, 2);
				{
				State = 256;
				Match(ParOpen);
				State = 257;
				Match(GRW_Underscore);
				State = 258;
				symbol();
				State = 260;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 259;
					index();
					}
					}
					State = 262;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QuotedSymbol) | (1L << PS_Not) | (1L << PS_Bool) | (1L << PS_ContinuedExecution) | (1L << PS_Error) | (1L << PS_False) | (1L << PS_ImmediateExit) | (1L << PS_Incomplete) | (1L << PS_Logic) | (1L << PS_Memout) | (1L << PS_Sat) | (1L << PS_Success) | (1L << PS_Theory) | (1L << PS_True) | (1L << PS_Unknown) | (1L << PS_Unsupported) | (1L << PS_Unsat))) != 0) || _la==Numeral || _la==UndefinedSymbol );
				State = 264;
				Match(ParClose);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Spec_constantContext spec_constant() {
			return GetRuleContext<Spec_constantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public S_exprContext[] s_expr() {
			return GetRuleContexts<S_exprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public S_exprContext s_expr(int i) {
			return GetRuleContext<S_exprContext>(i);
		}
		public Attribute_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterAttribute_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitAttribute_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_valueContext attribute_value() {
		Attribute_valueContext _localctx = new Attribute_valueContext(Context, State);
		EnterRule(_localctx, 36, RULE_attribute_value);
		int _la;
		try {
			State = 278;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case String:
			case Numeral:
			case Binary:
			case HexDecimal:
			case Decimal:
				EnterOuterAlt(_localctx, 1);
				{
				State = 268;
				spec_constant();
				}
				break;
			case QuotedSymbol:
			case PS_Not:
			case PS_Bool:
			case PS_ContinuedExecution:
			case PS_Error:
			case PS_False:
			case PS_ImmediateExit:
			case PS_Incomplete:
			case PS_Logic:
			case PS_Memout:
			case PS_Sat:
			case PS_Success:
			case PS_Theory:
			case PS_True:
			case PS_Unknown:
			case PS_Unsupported:
			case PS_Unsat:
			case UndefinedSymbol:
				EnterOuterAlt(_localctx, 2);
				{
				State = 269;
				symbol();
				}
				break;
			case ParOpen:
				EnterOuterAlt(_localctx, 3);
				{
				State = 270;
				Match(ParOpen);
				State = 274;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ParOpen) | (1L << String) | (1L << QuotedSymbol) | (1L << PS_Not) | (1L << PS_Bool) | (1L << PS_ContinuedExecution) | (1L << PS_Error) | (1L << PS_False) | (1L << PS_ImmediateExit) | (1L << PS_Incomplete) | (1L << PS_Logic) | (1L << PS_Memout) | (1L << PS_Sat) | (1L << PS_Success) | (1L << PS_Theory) | (1L << PS_True) | (1L << PS_Unknown) | (1L << PS_Unsupported) | (1L << PS_Unsat))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (Numeral - 67)) | (1L << (Binary - 67)) | (1L << (HexDecimal - 67)) | (1L << (Decimal - 67)) | (1L << (Colon - 67)) | (1L << (PK_AllStatistics - 67)) | (1L << (PK_AssertionStackLevels - 67)) | (1L << (PK_Authors - 67)) | (1L << (PK_Category - 67)) | (1L << (PK_Chainable - 67)) | (1L << (PK_Definition - 67)) | (1L << (PK_DiagnosticOutputChannel - 67)) | (1L << (PK_ErrorBehaviour - 67)) | (1L << (PK_Extension - 67)) | (1L << (PK_Funs - 67)) | (1L << (PK_FunsDescription - 67)) | (1L << (PK_GlobalDeclarations - 67)) | (1L << (PK_InteractiveMode - 67)) | (1L << (PK_Language - 67)) | (1L << (PK_LeftAssoc - 67)) | (1L << (PK_License - 67)) | (1L << (PK_Named - 67)) | (1L << (PK_Name - 67)) | (1L << (PK_Notes - 67)) | (1L << (PK_Pattern - 67)) | (1L << (PK_PrintSuccess - 67)) | (1L << (PK_ProduceAssertions - 67)) | (1L << (PK_ProduceAssignments - 67)) | (1L << (PK_ProduceModels - 67)) | (1L << (PK_ProduceProofs - 67)) | (1L << (PK_ProduceUnsatAssumptions - 67)) | (1L << (PK_ProduceUnsatCores - 67)) | (1L << (PK_RandomSeed - 67)) | (1L << (PK_ReasonUnknown - 67)) | (1L << (PK_RegularOutputChannel - 67)) | (1L << (PK_ReproducibleResourceLimit - 67)) | (1L << (PK_RightAssoc - 67)) | (1L << (PK_SmtLibVersion - 67)) | (1L << (PK_Sorts - 67)) | (1L << (PK_SortsDescription - 67)) | (1L << (PK_Source - 67)) | (1L << (PK_Status - 67)) | (1L << (PK_Theories - 67)) | (1L << (PK_Values - 67)) | (1L << (PK_Verbosity - 67)) | (1L << (PK_Version - 67)) | (1L << (UndefinedSymbol - 67)))) != 0)) {
					{
					{
					State = 271;
					s_expr();
					}
					}
					State = 276;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 277;
				Match(ParClose);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_valueContext attribute_value() {
			return GetRuleContext<Attribute_valueContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 38, RULE_attribute);
		try {
			State = 284;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 280;
				keyword();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 281;
				keyword();
				State = 282;
				attribute_value();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SortContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SortContext[] sort() {
			return GetRuleContexts<SortContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortContext sort(int i) {
			return GetRuleContext<SortContext>(i);
		}
		public SortContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sort; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterSort(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitSort(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSort(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SortContext sort() {
		SortContext _localctx = new SortContext(Context, State);
		EnterRule(_localctx, 40, RULE_sort);
		int _la;
		try {
			State = 296;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 286;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 287;
				Match(ParOpen);
				State = 288;
				identifier();
				State = 290;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 289;
					sort();
					}
					}
					State = 292;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ParOpen) | (1L << QuotedSymbol) | (1L << PS_Not) | (1L << PS_Bool) | (1L << PS_ContinuedExecution) | (1L << PS_Error) | (1L << PS_False) | (1L << PS_ImmediateExit) | (1L << PS_Incomplete) | (1L << PS_Logic) | (1L << PS_Memout) | (1L << PS_Sat) | (1L << PS_Success) | (1L << PS_Theory) | (1L << PS_True) | (1L << PS_Unknown) | (1L << PS_Unsupported) | (1L << PS_Unsat))) != 0) || _la==UndefinedSymbol );
				State = 294;
				Match(ParClose);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Qual_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_As() { return GetToken(SMTLIBv2Parser.GRW_As, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SortContext sort() {
			return GetRuleContext<SortContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		public Qual_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qual_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterQual_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitQual_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQual_identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Qual_identifierContext qual_identifier() {
		Qual_identifierContext _localctx = new Qual_identifierContext(Context, State);
		EnterRule(_localctx, 42, RULE_qual_identifier);
		try {
			State = 305;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,14,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 298;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 299;
				Match(ParOpen);
				State = 300;
				Match(GRW_As);
				State = 301;
				identifier();
				State = 302;
				sort();
				State = 303;
				Match(ParClose);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_bindingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		public Var_bindingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_binding; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterVar_binding(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitVar_binding(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVar_binding(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Var_bindingContext var_binding() {
		Var_bindingContext _localctx = new Var_bindingContext(Context, State);
		EnterRule(_localctx, 44, RULE_var_binding);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307;
			Match(ParOpen);
			State = 308;
			symbol();
			State = 309;
			term();
			State = 310;
			Match(ParClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sorted_varContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortContext sort() {
			return GetRuleContext<SortContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		public Sorted_varContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sorted_var; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterSorted_var(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitSorted_var(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSorted_var(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sorted_varContext sorted_var() {
		Sorted_varContext _localctx = new Sorted_varContext(Context, State);
		EnterRule(_localctx, 46, RULE_sorted_var);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			Match(ParOpen);
			State = 313;
			symbol();
			State = 314;
			sort();
			State = 315;
			Match(ParClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PatternContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext[] symbol() {
			return GetRuleContexts<SymbolContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol(int i) {
			return GetRuleContext<SymbolContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		public PatternContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pattern; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitPattern(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPattern(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PatternContext pattern() {
		PatternContext _localctx = new PatternContext(Context, State);
		EnterRule(_localctx, 48, RULE_pattern);
		int _la;
		try {
			State = 327;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case QuotedSymbol:
			case PS_Not:
			case PS_Bool:
			case PS_ContinuedExecution:
			case PS_Error:
			case PS_False:
			case PS_ImmediateExit:
			case PS_Incomplete:
			case PS_Logic:
			case PS_Memout:
			case PS_Sat:
			case PS_Success:
			case PS_Theory:
			case PS_True:
			case PS_Unknown:
			case PS_Unsupported:
			case PS_Unsat:
			case UndefinedSymbol:
				EnterOuterAlt(_localctx, 1);
				{
				State = 317;
				symbol();
				}
				break;
			case ParOpen:
				EnterOuterAlt(_localctx, 2);
				{
				State = 318;
				Match(ParOpen);
				State = 319;
				symbol();
				State = 321;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 320;
					symbol();
					}
					}
					State = 323;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QuotedSymbol) | (1L << PS_Not) | (1L << PS_Bool) | (1L << PS_ContinuedExecution) | (1L << PS_Error) | (1L << PS_False) | (1L << PS_ImmediateExit) | (1L << PS_Incomplete) | (1L << PS_Logic) | (1L << PS_Memout) | (1L << PS_Sat) | (1L << PS_Success) | (1L << PS_Theory) | (1L << PS_True) | (1L << PS_Unknown) | (1L << PS_Unsupported) | (1L << PS_Unsat))) != 0) || _la==UndefinedSymbol );
				State = 325;
				Match(ParClose);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Match_caseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PatternContext pattern() {
			return GetRuleContext<PatternContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		public Match_caseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_match_case; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterMatch_case(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitMatch_case(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMatch_case(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Match_caseContext match_case() {
		Match_caseContext _localctx = new Match_caseContext(Context, State);
		EnterRule(_localctx, 50, RULE_match_case);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 329;
			Match(ParOpen);
			State = 330;
			pattern();
			State = 331;
			term();
			State = 332;
			Match(ParClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Spec_constantContext spec_constant() {
			return GetRuleContext<Spec_constantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Qual_identifierContext qual_identifier() {
			return GetRuleContext<Qual_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ParOpen() { return GetTokens(SMTLIBv2Parser.ParOpen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen(int i) {
			return GetToken(SMTLIBv2Parser.ParOpen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ParClose() { return GetTokens(SMTLIBv2Parser.ParClose); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose(int i) {
			return GetToken(SMTLIBv2Parser.ParClose, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_Let() { return GetToken(SMTLIBv2Parser.GRW_Let, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Var_bindingContext[] var_binding() {
			return GetRuleContexts<Var_bindingContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Var_bindingContext var_binding(int i) {
			return GetRuleContext<Var_bindingContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_Forall() { return GetToken(SMTLIBv2Parser.GRW_Forall, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sorted_varContext[] sorted_var() {
			return GetRuleContexts<Sorted_varContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sorted_varContext sorted_var(int i) {
			return GetRuleContext<Sorted_varContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_Exists() { return GetToken(SMTLIBv2Parser.GRW_Exists, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_Match() { return GetToken(SMTLIBv2Parser.GRW_Match, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Match_caseContext[] match_case() {
			return GetRuleContexts<Match_caseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Match_caseContext match_case(int i) {
			return GetRuleContext<Match_caseContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_Exclamation() { return GetToken(SMTLIBv2Parser.GRW_Exclamation, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 52, RULE_term);
		int _la;
		try {
			State = 403;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 334;
				spec_constant();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 335;
				qual_identifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 336;
				Match(ParOpen);
				State = 337;
				qual_identifier();
				State = 339;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 338;
					term();
					}
					}
					State = 341;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ParOpen) | (1L << String) | (1L << QuotedSymbol) | (1L << PS_Not) | (1L << PS_Bool) | (1L << PS_ContinuedExecution) | (1L << PS_Error) | (1L << PS_False) | (1L << PS_ImmediateExit) | (1L << PS_Incomplete) | (1L << PS_Logic) | (1L << PS_Memout) | (1L << PS_Sat) | (1L << PS_Success) | (1L << PS_Theory) | (1L << PS_True) | (1L << PS_Unknown) | (1L << PS_Unsupported) | (1L << PS_Unsat))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (Numeral - 67)) | (1L << (Binary - 67)) | (1L << (HexDecimal - 67)) | (1L << (Decimal - 67)) | (1L << (UndefinedSymbol - 67)))) != 0) );
				State = 343;
				Match(ParClose);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 345;
				Match(ParOpen);
				State = 346;
				Match(GRW_Let);
				State = 347;
				Match(ParOpen);
				State = 349;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 348;
					var_binding();
					}
					}
					State = 351;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ParOpen );
				State = 353;
				Match(ParClose);
				State = 354;
				term();
				State = 355;
				Match(ParClose);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 357;
				Match(ParOpen);
				State = 358;
				Match(GRW_Forall);
				State = 359;
				Match(ParOpen);
				State = 361;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 360;
					sorted_var();
					}
					}
					State = 363;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ParOpen );
				State = 365;
				Match(ParClose);
				State = 366;
				term();
				State = 367;
				Match(ParClose);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 369;
				Match(ParOpen);
				State = 370;
				Match(GRW_Exists);
				State = 371;
				Match(ParOpen);
				State = 373;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 372;
					sorted_var();
					}
					}
					State = 375;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ParOpen );
				State = 377;
				Match(ParClose);
				State = 378;
				term();
				State = 379;
				Match(ParClose);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 381;
				Match(ParOpen);
				State = 382;
				Match(GRW_Match);
				State = 383;
				term();
				State = 384;
				Match(ParOpen);
				State = 386;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 385;
					match_case();
					}
					}
					State = 388;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ParOpen );
				State = 390;
				Match(ParClose);
				State = 391;
				Match(ParClose);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 393;
				Match(ParOpen);
				State = 394;
				Match(GRW_Exclamation);
				State = 395;
				term();
				State = 397;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 396;
					attribute();
					}
					}
					State = 399;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (Colon - 71)) | (1L << (PK_AllStatistics - 71)) | (1L << (PK_AssertionStackLevels - 71)) | (1L << (PK_Authors - 71)) | (1L << (PK_Category - 71)) | (1L << (PK_Chainable - 71)) | (1L << (PK_Definition - 71)) | (1L << (PK_DiagnosticOutputChannel - 71)) | (1L << (PK_ErrorBehaviour - 71)) | (1L << (PK_Extension - 71)) | (1L << (PK_Funs - 71)) | (1L << (PK_FunsDescription - 71)) | (1L << (PK_GlobalDeclarations - 71)) | (1L << (PK_InteractiveMode - 71)) | (1L << (PK_Language - 71)) | (1L << (PK_LeftAssoc - 71)) | (1L << (PK_License - 71)) | (1L << (PK_Named - 71)) | (1L << (PK_Name - 71)) | (1L << (PK_Notes - 71)) | (1L << (PK_Pattern - 71)) | (1L << (PK_PrintSuccess - 71)) | (1L << (PK_ProduceAssertions - 71)) | (1L << (PK_ProduceAssignments - 71)) | (1L << (PK_ProduceModels - 71)) | (1L << (PK_ProduceProofs - 71)) | (1L << (PK_ProduceUnsatAssumptions - 71)) | (1L << (PK_ProduceUnsatCores - 71)) | (1L << (PK_RandomSeed - 71)) | (1L << (PK_ReasonUnknown - 71)) | (1L << (PK_RegularOutputChannel - 71)) | (1L << (PK_ReproducibleResourceLimit - 71)) | (1L << (PK_RightAssoc - 71)) | (1L << (PK_SmtLibVersion - 71)) | (1L << (PK_Sorts - 71)) | (1L << (PK_SortsDescription - 71)) | (1L << (PK_Source - 71)) | (1L << (PK_Status - 71)) | (1L << (PK_Theories - 71)) | (1L << (PK_Values - 71)) | (1L << (PK_Verbosity - 71)) | (1L << (PK_Version - 71)))) != 0) );
				State = 401;
				Match(ParClose);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sort_symbol_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumeralContext numeral() {
			return GetRuleContext<NumeralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public Sort_symbol_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sort_symbol_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterSort_symbol_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitSort_symbol_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSort_symbol_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sort_symbol_declContext sort_symbol_decl() {
		Sort_symbol_declContext _localctx = new Sort_symbol_declContext(Context, State);
		EnterRule(_localctx, 54, RULE_sort_symbol_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 405;
			Match(ParOpen);
			State = 406;
			identifier();
			State = 407;
			numeral();
			State = 411;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (Colon - 71)) | (1L << (PK_AllStatistics - 71)) | (1L << (PK_AssertionStackLevels - 71)) | (1L << (PK_Authors - 71)) | (1L << (PK_Category - 71)) | (1L << (PK_Chainable - 71)) | (1L << (PK_Definition - 71)) | (1L << (PK_DiagnosticOutputChannel - 71)) | (1L << (PK_ErrorBehaviour - 71)) | (1L << (PK_Extension - 71)) | (1L << (PK_Funs - 71)) | (1L << (PK_FunsDescription - 71)) | (1L << (PK_GlobalDeclarations - 71)) | (1L << (PK_InteractiveMode - 71)) | (1L << (PK_Language - 71)) | (1L << (PK_LeftAssoc - 71)) | (1L << (PK_License - 71)) | (1L << (PK_Named - 71)) | (1L << (PK_Name - 71)) | (1L << (PK_Notes - 71)) | (1L << (PK_Pattern - 71)) | (1L << (PK_PrintSuccess - 71)) | (1L << (PK_ProduceAssertions - 71)) | (1L << (PK_ProduceAssignments - 71)) | (1L << (PK_ProduceModels - 71)) | (1L << (PK_ProduceProofs - 71)) | (1L << (PK_ProduceUnsatAssumptions - 71)) | (1L << (PK_ProduceUnsatCores - 71)) | (1L << (PK_RandomSeed - 71)) | (1L << (PK_ReasonUnknown - 71)) | (1L << (PK_RegularOutputChannel - 71)) | (1L << (PK_ReproducibleResourceLimit - 71)) | (1L << (PK_RightAssoc - 71)) | (1L << (PK_SmtLibVersion - 71)) | (1L << (PK_Sorts - 71)) | (1L << (PK_SortsDescription - 71)) | (1L << (PK_Source - 71)) | (1L << (PK_Status - 71)) | (1L << (PK_Theories - 71)) | (1L << (PK_Values - 71)) | (1L << (PK_Verbosity - 71)) | (1L << (PK_Version - 71)))) != 0)) {
				{
				{
				State = 408;
				attribute();
				}
				}
				State = 413;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 414;
			Match(ParClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Meta_spec_constantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_Numeral() { return GetToken(SMTLIBv2Parser.GRW_Numeral, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_Decimal() { return GetToken(SMTLIBv2Parser.GRW_Decimal, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_String() { return GetToken(SMTLIBv2Parser.GRW_String, 0); }
		public Meta_spec_constantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_meta_spec_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterMeta_spec_constant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitMeta_spec_constant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMeta_spec_constant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Meta_spec_constantContext meta_spec_constant() {
		Meta_spec_constantContext _localctx = new Meta_spec_constantContext(Context, State);
		EnterRule(_localctx, 56, RULE_meta_spec_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 416;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 58)) & ~0x3f) == 0 && ((1L << (_la - 58)) & ((1L << (GRW_Decimal - 58)) | (1L << (GRW_Numeral - 58)) | (1L << (GRW_String - 58)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fun_symbol_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Spec_constantContext spec_constant() {
			return GetRuleContext<Spec_constantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortContext[] sort() {
			return GetRuleContexts<SortContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortContext sort(int i) {
			return GetRuleContext<SortContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Meta_spec_constantContext meta_spec_constant() {
			return GetRuleContext<Meta_spec_constantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public Fun_symbol_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fun_symbol_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterFun_symbol_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitFun_symbol_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFun_symbol_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fun_symbol_declContext fun_symbol_decl() {
		Fun_symbol_declContext _localctx = new Fun_symbol_declContext(Context, State);
		EnterRule(_localctx, 58, RULE_fun_symbol_decl);
		int _la;
		try {
			State = 455;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 418;
				Match(ParOpen);
				State = 419;
				spec_constant();
				State = 420;
				sort();
				State = 424;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (Colon - 71)) | (1L << (PK_AllStatistics - 71)) | (1L << (PK_AssertionStackLevels - 71)) | (1L << (PK_Authors - 71)) | (1L << (PK_Category - 71)) | (1L << (PK_Chainable - 71)) | (1L << (PK_Definition - 71)) | (1L << (PK_DiagnosticOutputChannel - 71)) | (1L << (PK_ErrorBehaviour - 71)) | (1L << (PK_Extension - 71)) | (1L << (PK_Funs - 71)) | (1L << (PK_FunsDescription - 71)) | (1L << (PK_GlobalDeclarations - 71)) | (1L << (PK_InteractiveMode - 71)) | (1L << (PK_Language - 71)) | (1L << (PK_LeftAssoc - 71)) | (1L << (PK_License - 71)) | (1L << (PK_Named - 71)) | (1L << (PK_Name - 71)) | (1L << (PK_Notes - 71)) | (1L << (PK_Pattern - 71)) | (1L << (PK_PrintSuccess - 71)) | (1L << (PK_ProduceAssertions - 71)) | (1L << (PK_ProduceAssignments - 71)) | (1L << (PK_ProduceModels - 71)) | (1L << (PK_ProduceProofs - 71)) | (1L << (PK_ProduceUnsatAssumptions - 71)) | (1L << (PK_ProduceUnsatCores - 71)) | (1L << (PK_RandomSeed - 71)) | (1L << (PK_ReasonUnknown - 71)) | (1L << (PK_RegularOutputChannel - 71)) | (1L << (PK_ReproducibleResourceLimit - 71)) | (1L << (PK_RightAssoc - 71)) | (1L << (PK_SmtLibVersion - 71)) | (1L << (PK_Sorts - 71)) | (1L << (PK_SortsDescription - 71)) | (1L << (PK_Source - 71)) | (1L << (PK_Status - 71)) | (1L << (PK_Theories - 71)) | (1L << (PK_Values - 71)) | (1L << (PK_Verbosity - 71)) | (1L << (PK_Version - 71)))) != 0)) {
					{
					{
					State = 421;
					attribute();
					}
					}
					State = 426;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 427;
				Match(ParClose);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 429;
				Match(ParOpen);
				State = 430;
				meta_spec_constant();
				State = 431;
				sort();
				State = 435;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (Colon - 71)) | (1L << (PK_AllStatistics - 71)) | (1L << (PK_AssertionStackLevels - 71)) | (1L << (PK_Authors - 71)) | (1L << (PK_Category - 71)) | (1L << (PK_Chainable - 71)) | (1L << (PK_Definition - 71)) | (1L << (PK_DiagnosticOutputChannel - 71)) | (1L << (PK_ErrorBehaviour - 71)) | (1L << (PK_Extension - 71)) | (1L << (PK_Funs - 71)) | (1L << (PK_FunsDescription - 71)) | (1L << (PK_GlobalDeclarations - 71)) | (1L << (PK_InteractiveMode - 71)) | (1L << (PK_Language - 71)) | (1L << (PK_LeftAssoc - 71)) | (1L << (PK_License - 71)) | (1L << (PK_Named - 71)) | (1L << (PK_Name - 71)) | (1L << (PK_Notes - 71)) | (1L << (PK_Pattern - 71)) | (1L << (PK_PrintSuccess - 71)) | (1L << (PK_ProduceAssertions - 71)) | (1L << (PK_ProduceAssignments - 71)) | (1L << (PK_ProduceModels - 71)) | (1L << (PK_ProduceProofs - 71)) | (1L << (PK_ProduceUnsatAssumptions - 71)) | (1L << (PK_ProduceUnsatCores - 71)) | (1L << (PK_RandomSeed - 71)) | (1L << (PK_ReasonUnknown - 71)) | (1L << (PK_RegularOutputChannel - 71)) | (1L << (PK_ReproducibleResourceLimit - 71)) | (1L << (PK_RightAssoc - 71)) | (1L << (PK_SmtLibVersion - 71)) | (1L << (PK_Sorts - 71)) | (1L << (PK_SortsDescription - 71)) | (1L << (PK_Source - 71)) | (1L << (PK_Status - 71)) | (1L << (PK_Theories - 71)) | (1L << (PK_Values - 71)) | (1L << (PK_Verbosity - 71)) | (1L << (PK_Version - 71)))) != 0)) {
					{
					{
					State = 432;
					attribute();
					}
					}
					State = 437;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 438;
				Match(ParClose);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 440;
				Match(ParOpen);
				State = 441;
				identifier();
				State = 443;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 442;
					sort();
					}
					}
					State = 445;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ParOpen) | (1L << QuotedSymbol) | (1L << PS_Not) | (1L << PS_Bool) | (1L << PS_ContinuedExecution) | (1L << PS_Error) | (1L << PS_False) | (1L << PS_ImmediateExit) | (1L << PS_Incomplete) | (1L << PS_Logic) | (1L << PS_Memout) | (1L << PS_Sat) | (1L << PS_Success) | (1L << PS_Theory) | (1L << PS_True) | (1L << PS_Unknown) | (1L << PS_Unsupported) | (1L << PS_Unsat))) != 0) || _la==UndefinedSymbol );
				State = 450;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (Colon - 71)) | (1L << (PK_AllStatistics - 71)) | (1L << (PK_AssertionStackLevels - 71)) | (1L << (PK_Authors - 71)) | (1L << (PK_Category - 71)) | (1L << (PK_Chainable - 71)) | (1L << (PK_Definition - 71)) | (1L << (PK_DiagnosticOutputChannel - 71)) | (1L << (PK_ErrorBehaviour - 71)) | (1L << (PK_Extension - 71)) | (1L << (PK_Funs - 71)) | (1L << (PK_FunsDescription - 71)) | (1L << (PK_GlobalDeclarations - 71)) | (1L << (PK_InteractiveMode - 71)) | (1L << (PK_Language - 71)) | (1L << (PK_LeftAssoc - 71)) | (1L << (PK_License - 71)) | (1L << (PK_Named - 71)) | (1L << (PK_Name - 71)) | (1L << (PK_Notes - 71)) | (1L << (PK_Pattern - 71)) | (1L << (PK_PrintSuccess - 71)) | (1L << (PK_ProduceAssertions - 71)) | (1L << (PK_ProduceAssignments - 71)) | (1L << (PK_ProduceModels - 71)) | (1L << (PK_ProduceProofs - 71)) | (1L << (PK_ProduceUnsatAssumptions - 71)) | (1L << (PK_ProduceUnsatCores - 71)) | (1L << (PK_RandomSeed - 71)) | (1L << (PK_ReasonUnknown - 71)) | (1L << (PK_RegularOutputChannel - 71)) | (1L << (PK_ReproducibleResourceLimit - 71)) | (1L << (PK_RightAssoc - 71)) | (1L << (PK_SmtLibVersion - 71)) | (1L << (PK_Sorts - 71)) | (1L << (PK_SortsDescription - 71)) | (1L << (PK_Source - 71)) | (1L << (PK_Status - 71)) | (1L << (PK_Theories - 71)) | (1L << (PK_Values - 71)) | (1L << (PK_Verbosity - 71)) | (1L << (PK_Version - 71)))) != 0)) {
					{
					{
					State = 447;
					attribute();
					}
					}
					State = 452;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 453;
				Match(ParClose);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Par_fun_symbol_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fun_symbol_declContext fun_symbol_decl() {
			return GetRuleContext<Fun_symbol_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ParOpen() { return GetTokens(SMTLIBv2Parser.ParOpen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen(int i) {
			return GetToken(SMTLIBv2Parser.ParOpen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_Par() { return GetToken(SMTLIBv2Parser.GRW_Par, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ParClose() { return GetTokens(SMTLIBv2Parser.ParClose); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose(int i) {
			return GetToken(SMTLIBv2Parser.ParClose, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext[] symbol() {
			return GetRuleContexts<SymbolContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol(int i) {
			return GetRuleContext<SymbolContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortContext[] sort() {
			return GetRuleContexts<SortContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortContext sort(int i) {
			return GetRuleContext<SortContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public Par_fun_symbol_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_par_fun_symbol_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterPar_fun_symbol_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitPar_fun_symbol_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPar_fun_symbol_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Par_fun_symbol_declContext par_fun_symbol_decl() {
		Par_fun_symbol_declContext _localctx = new Par_fun_symbol_declContext(Context, State);
		EnterRule(_localctx, 60, RULE_par_fun_symbol_decl);
		int _la;
		try {
			State = 483;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 457;
				fun_symbol_decl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 458;
				Match(ParOpen);
				State = 459;
				Match(GRW_Par);
				State = 460;
				Match(ParOpen);
				State = 462;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 461;
					symbol();
					}
					}
					State = 464;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QuotedSymbol) | (1L << PS_Not) | (1L << PS_Bool) | (1L << PS_ContinuedExecution) | (1L << PS_Error) | (1L << PS_False) | (1L << PS_ImmediateExit) | (1L << PS_Incomplete) | (1L << PS_Logic) | (1L << PS_Memout) | (1L << PS_Sat) | (1L << PS_Success) | (1L << PS_Theory) | (1L << PS_True) | (1L << PS_Unknown) | (1L << PS_Unsupported) | (1L << PS_Unsat))) != 0) || _la==UndefinedSymbol );
				State = 466;
				Match(ParClose);
				State = 467;
				Match(ParOpen);
				State = 468;
				identifier();
				State = 470;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 469;
					sort();
					}
					}
					State = 472;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ParOpen) | (1L << QuotedSymbol) | (1L << PS_Not) | (1L << PS_Bool) | (1L << PS_ContinuedExecution) | (1L << PS_Error) | (1L << PS_False) | (1L << PS_ImmediateExit) | (1L << PS_Incomplete) | (1L << PS_Logic) | (1L << PS_Memout) | (1L << PS_Sat) | (1L << PS_Success) | (1L << PS_Theory) | (1L << PS_True) | (1L << PS_Unknown) | (1L << PS_Unsupported) | (1L << PS_Unsat))) != 0) || _la==UndefinedSymbol );
				State = 477;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (Colon - 71)) | (1L << (PK_AllStatistics - 71)) | (1L << (PK_AssertionStackLevels - 71)) | (1L << (PK_Authors - 71)) | (1L << (PK_Category - 71)) | (1L << (PK_Chainable - 71)) | (1L << (PK_Definition - 71)) | (1L << (PK_DiagnosticOutputChannel - 71)) | (1L << (PK_ErrorBehaviour - 71)) | (1L << (PK_Extension - 71)) | (1L << (PK_Funs - 71)) | (1L << (PK_FunsDescription - 71)) | (1L << (PK_GlobalDeclarations - 71)) | (1L << (PK_InteractiveMode - 71)) | (1L << (PK_Language - 71)) | (1L << (PK_LeftAssoc - 71)) | (1L << (PK_License - 71)) | (1L << (PK_Named - 71)) | (1L << (PK_Name - 71)) | (1L << (PK_Notes - 71)) | (1L << (PK_Pattern - 71)) | (1L << (PK_PrintSuccess - 71)) | (1L << (PK_ProduceAssertions - 71)) | (1L << (PK_ProduceAssignments - 71)) | (1L << (PK_ProduceModels - 71)) | (1L << (PK_ProduceProofs - 71)) | (1L << (PK_ProduceUnsatAssumptions - 71)) | (1L << (PK_ProduceUnsatCores - 71)) | (1L << (PK_RandomSeed - 71)) | (1L << (PK_ReasonUnknown - 71)) | (1L << (PK_RegularOutputChannel - 71)) | (1L << (PK_ReproducibleResourceLimit - 71)) | (1L << (PK_RightAssoc - 71)) | (1L << (PK_SmtLibVersion - 71)) | (1L << (PK_Sorts - 71)) | (1L << (PK_SortsDescription - 71)) | (1L << (PK_Source - 71)) | (1L << (PK_Status - 71)) | (1L << (PK_Theories - 71)) | (1L << (PK_Values - 71)) | (1L << (PK_Verbosity - 71)) | (1L << (PK_Version - 71)))) != 0)) {
					{
					{
					State = 474;
					attribute();
					}
					}
					State = 479;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 480;
				Match(ParClose);
				State = 481;
				Match(ParClose);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Theory_attributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Sorts() { return GetToken(SMTLIBv2Parser.PK_Sorts, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Sort_symbol_declContext[] sort_symbol_decl() {
			return GetRuleContexts<Sort_symbol_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sort_symbol_declContext sort_symbol_decl(int i) {
			return GetRuleContext<Sort_symbol_declContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Funs() { return GetToken(SMTLIBv2Parser.PK_Funs, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Par_fun_symbol_declContext[] par_fun_symbol_decl() {
			return GetRuleContexts<Par_fun_symbol_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Par_fun_symbol_declContext par_fun_symbol_decl(int i) {
			return GetRuleContext<Par_fun_symbol_declContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_SortsDescription() { return GetToken(SMTLIBv2Parser.PK_SortsDescription, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_FunsDescription() { return GetToken(SMTLIBv2Parser.PK_FunsDescription, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Definition() { return GetToken(SMTLIBv2Parser.PK_Definition, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Values() { return GetToken(SMTLIBv2Parser.PK_Values, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Notes() { return GetToken(SMTLIBv2Parser.PK_Notes, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		public Theory_attributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_theory_attribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterTheory_attribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitTheory_attribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTheory_attribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Theory_attributeContext theory_attribute() {
		Theory_attributeContext _localctx = new Theory_attributeContext(Context, State);
		EnterRule(_localctx, 62, RULE_theory_attribute);
		int _la;
		try {
			State = 514;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 485;
				Match(PK_Sorts);
				State = 486;
				Match(ParOpen);
				State = 488;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 487;
					sort_symbol_decl();
					}
					}
					State = 490;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ParOpen );
				State = 492;
				Match(ParClose);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 494;
				Match(PK_Funs);
				State = 495;
				Match(ParOpen);
				State = 497;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 496;
					par_fun_symbol_decl();
					}
					}
					State = 499;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ParOpen );
				State = 501;
				Match(ParClose);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 503;
				Match(PK_SortsDescription);
				State = 504;
				@string();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 505;
				Match(PK_FunsDescription);
				State = 506;
				@string();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 507;
				Match(PK_Definition);
				State = 508;
				@string();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 509;
				Match(PK_Values);
				State = 510;
				@string();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 511;
				Match(PK_Notes);
				State = 512;
				@string();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 513;
				attribute();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Theory_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Theory() { return GetToken(SMTLIBv2Parser.PS_Theory, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Theory_attributeContext[] theory_attribute() {
			return GetRuleContexts<Theory_attributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Theory_attributeContext theory_attribute(int i) {
			return GetRuleContext<Theory_attributeContext>(i);
		}
		public Theory_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_theory_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterTheory_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitTheory_decl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTheory_decl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Theory_declContext theory_decl() {
		Theory_declContext _localctx = new Theory_declContext(Context, State);
		EnterRule(_localctx, 64, RULE_theory_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 516;
			Match(ParOpen);
			State = 517;
			Match(PS_Theory);
			State = 518;
			symbol();
			State = 520;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 519;
				theory_attribute();
				}
				}
				State = 522;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (Colon - 71)) | (1L << (PK_AllStatistics - 71)) | (1L << (PK_AssertionStackLevels - 71)) | (1L << (PK_Authors - 71)) | (1L << (PK_Category - 71)) | (1L << (PK_Chainable - 71)) | (1L << (PK_Definition - 71)) | (1L << (PK_DiagnosticOutputChannel - 71)) | (1L << (PK_ErrorBehaviour - 71)) | (1L << (PK_Extension - 71)) | (1L << (PK_Funs - 71)) | (1L << (PK_FunsDescription - 71)) | (1L << (PK_GlobalDeclarations - 71)) | (1L << (PK_InteractiveMode - 71)) | (1L << (PK_Language - 71)) | (1L << (PK_LeftAssoc - 71)) | (1L << (PK_License - 71)) | (1L << (PK_Named - 71)) | (1L << (PK_Name - 71)) | (1L << (PK_Notes - 71)) | (1L << (PK_Pattern - 71)) | (1L << (PK_PrintSuccess - 71)) | (1L << (PK_ProduceAssertions - 71)) | (1L << (PK_ProduceAssignments - 71)) | (1L << (PK_ProduceModels - 71)) | (1L << (PK_ProduceProofs - 71)) | (1L << (PK_ProduceUnsatAssumptions - 71)) | (1L << (PK_ProduceUnsatCores - 71)) | (1L << (PK_RandomSeed - 71)) | (1L << (PK_ReasonUnknown - 71)) | (1L << (PK_RegularOutputChannel - 71)) | (1L << (PK_ReproducibleResourceLimit - 71)) | (1L << (PK_RightAssoc - 71)) | (1L << (PK_SmtLibVersion - 71)) | (1L << (PK_Sorts - 71)) | (1L << (PK_SortsDescription - 71)) | (1L << (PK_Source - 71)) | (1L << (PK_Status - 71)) | (1L << (PK_Theories - 71)) | (1L << (PK_Values - 71)) | (1L << (PK_Verbosity - 71)) | (1L << (PK_Version - 71)))) != 0) );
			State = 524;
			Match(ParClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Logic_attribueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Theories() { return GetToken(SMTLIBv2Parser.PK_Theories, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext[] symbol() {
			return GetRuleContexts<SymbolContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol(int i) {
			return GetRuleContext<SymbolContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Language() { return GetToken(SMTLIBv2Parser.PK_Language, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Extension() { return GetToken(SMTLIBv2Parser.PK_Extension, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Values() { return GetToken(SMTLIBv2Parser.PK_Values, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Notes() { return GetToken(SMTLIBv2Parser.PK_Notes, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		public Logic_attribueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logic_attribue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterLogic_attribue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitLogic_attribue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogic_attribue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logic_attribueContext logic_attribue() {
		Logic_attribueContext _localctx = new Logic_attribueContext(Context, State);
		EnterRule(_localctx, 66, RULE_logic_attribue);
		int _la;
		try {
			State = 544;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 526;
				Match(PK_Theories);
				State = 527;
				Match(ParOpen);
				State = 529;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 528;
					symbol();
					}
					}
					State = 531;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QuotedSymbol) | (1L << PS_Not) | (1L << PS_Bool) | (1L << PS_ContinuedExecution) | (1L << PS_Error) | (1L << PS_False) | (1L << PS_ImmediateExit) | (1L << PS_Incomplete) | (1L << PS_Logic) | (1L << PS_Memout) | (1L << PS_Sat) | (1L << PS_Success) | (1L << PS_Theory) | (1L << PS_True) | (1L << PS_Unknown) | (1L << PS_Unsupported) | (1L << PS_Unsat))) != 0) || _la==UndefinedSymbol );
				State = 533;
				Match(ParClose);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 535;
				Match(PK_Language);
				State = 536;
				@string();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 537;
				Match(PK_Extension);
				State = 538;
				@string();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 539;
				Match(PK_Values);
				State = 540;
				@string();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 541;
				Match(PK_Notes);
				State = 542;
				@string();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 543;
				attribute();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogicContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Logic() { return GetToken(SMTLIBv2Parser.PS_Logic, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Logic_attribueContext[] logic_attribue() {
			return GetRuleContexts<Logic_attribueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logic_attribueContext logic_attribue(int i) {
			return GetRuleContext<Logic_attribueContext>(i);
		}
		public LogicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterLogic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitLogic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LogicContext logic() {
		LogicContext _localctx = new LogicContext(Context, State);
		EnterRule(_localctx, 68, RULE_logic);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 546;
			Match(ParOpen);
			State = 547;
			Match(PS_Logic);
			State = 548;
			symbol();
			State = 550;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 549;
				logic_attribue();
				}
				}
				State = 552;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (Colon - 71)) | (1L << (PK_AllStatistics - 71)) | (1L << (PK_AssertionStackLevels - 71)) | (1L << (PK_Authors - 71)) | (1L << (PK_Category - 71)) | (1L << (PK_Chainable - 71)) | (1L << (PK_Definition - 71)) | (1L << (PK_DiagnosticOutputChannel - 71)) | (1L << (PK_ErrorBehaviour - 71)) | (1L << (PK_Extension - 71)) | (1L << (PK_Funs - 71)) | (1L << (PK_FunsDescription - 71)) | (1L << (PK_GlobalDeclarations - 71)) | (1L << (PK_InteractiveMode - 71)) | (1L << (PK_Language - 71)) | (1L << (PK_LeftAssoc - 71)) | (1L << (PK_License - 71)) | (1L << (PK_Named - 71)) | (1L << (PK_Name - 71)) | (1L << (PK_Notes - 71)) | (1L << (PK_Pattern - 71)) | (1L << (PK_PrintSuccess - 71)) | (1L << (PK_ProduceAssertions - 71)) | (1L << (PK_ProduceAssignments - 71)) | (1L << (PK_ProduceModels - 71)) | (1L << (PK_ProduceProofs - 71)) | (1L << (PK_ProduceUnsatAssumptions - 71)) | (1L << (PK_ProduceUnsatCores - 71)) | (1L << (PK_RandomSeed - 71)) | (1L << (PK_ReasonUnknown - 71)) | (1L << (PK_RegularOutputChannel - 71)) | (1L << (PK_ReproducibleResourceLimit - 71)) | (1L << (PK_RightAssoc - 71)) | (1L << (PK_SmtLibVersion - 71)) | (1L << (PK_Sorts - 71)) | (1L << (PK_SortsDescription - 71)) | (1L << (PK_Source - 71)) | (1L << (PK_Status - 71)) | (1L << (PK_Theories - 71)) | (1L << (PK_Values - 71)) | (1L << (PK_Verbosity - 71)) | (1L << (PK_Version - 71)))) != 0) );
			State = 554;
			Match(ParClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sort_decContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumeralContext numeral() {
			return GetRuleContext<NumeralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		public Sort_decContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sort_dec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterSort_dec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitSort_dec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSort_dec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sort_decContext sort_dec() {
		Sort_decContext _localctx = new Sort_decContext(Context, State);
		EnterRule(_localctx, 70, RULE_sort_dec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 556;
			Match(ParOpen);
			State = 557;
			symbol();
			State = 558;
			numeral();
			State = 559;
			Match(ParClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Selector_decContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortContext sort() {
			return GetRuleContext<SortContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		public Selector_decContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selector_dec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterSelector_dec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitSelector_dec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelector_dec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Selector_decContext selector_dec() {
		Selector_decContext _localctx = new Selector_decContext(Context, State);
		EnterRule(_localctx, 72, RULE_selector_dec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 561;
			Match(ParOpen);
			State = 562;
			symbol();
			State = 563;
			sort();
			State = 564;
			Match(ParClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Constructor_decContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Selector_decContext[] selector_dec() {
			return GetRuleContexts<Selector_decContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Selector_decContext selector_dec(int i) {
			return GetRuleContext<Selector_decContext>(i);
		}
		public Constructor_decContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor_dec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterConstructor_dec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitConstructor_dec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor_dec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Constructor_decContext constructor_dec() {
		Constructor_decContext _localctx = new Constructor_decContext(Context, State);
		EnterRule(_localctx, 74, RULE_constructor_dec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 566;
			Match(ParOpen);
			State = 567;
			symbol();
			State = 571;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ParOpen) {
				{
				{
				State = 568;
				selector_dec();
				}
				}
				State = 573;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 574;
			Match(ParClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Datatype_decContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ParOpen() { return GetTokens(SMTLIBv2Parser.ParOpen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen(int i) {
			return GetToken(SMTLIBv2Parser.ParOpen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ParClose() { return GetTokens(SMTLIBv2Parser.ParClose); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose(int i) {
			return GetToken(SMTLIBv2Parser.ParClose, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Constructor_decContext[] constructor_dec() {
			return GetRuleContexts<Constructor_decContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Constructor_decContext constructor_dec(int i) {
			return GetRuleContext<Constructor_decContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRW_Par() { return GetToken(SMTLIBv2Parser.GRW_Par, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext[] symbol() {
			return GetRuleContexts<SymbolContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol(int i) {
			return GetRuleContext<SymbolContext>(i);
		}
		public Datatype_decContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_datatype_dec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterDatatype_dec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitDatatype_dec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDatatype_dec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Datatype_decContext datatype_dec() {
		Datatype_decContext _localctx = new Datatype_decContext(Context, State);
		EnterRule(_localctx, 76, RULE_datatype_dec);
		int _la;
		try {
			State = 602;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 576;
				Match(ParOpen);
				State = 578;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 577;
					constructor_dec();
					}
					}
					State = 580;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ParOpen );
				State = 582;
				Match(ParClose);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 584;
				Match(ParOpen);
				State = 585;
				Match(GRW_Par);
				State = 586;
				Match(ParOpen);
				State = 588;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 587;
					symbol();
					}
					}
					State = 590;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QuotedSymbol) | (1L << PS_Not) | (1L << PS_Bool) | (1L << PS_ContinuedExecution) | (1L << PS_Error) | (1L << PS_False) | (1L << PS_ImmediateExit) | (1L << PS_Incomplete) | (1L << PS_Logic) | (1L << PS_Memout) | (1L << PS_Sat) | (1L << PS_Success) | (1L << PS_Theory) | (1L << PS_True) | (1L << PS_Unknown) | (1L << PS_Unsupported) | (1L << PS_Unsat))) != 0) || _la==UndefinedSymbol );
				State = 592;
				Match(ParClose);
				State = 593;
				Match(ParOpen);
				State = 595;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 594;
					constructor_dec();
					}
					}
					State = 597;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ParOpen );
				State = 599;
				Match(ParClose);
				State = 600;
				Match(ParClose);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_decContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ParOpen() { return GetTokens(SMTLIBv2Parser.ParOpen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen(int i) {
			return GetToken(SMTLIBv2Parser.ParOpen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ParClose() { return GetTokens(SMTLIBv2Parser.ParClose); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose(int i) {
			return GetToken(SMTLIBv2Parser.ParClose, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortContext sort() {
			return GetRuleContext<SortContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sorted_varContext[] sorted_var() {
			return GetRuleContexts<Sorted_varContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sorted_varContext sorted_var(int i) {
			return GetRuleContext<Sorted_varContext>(i);
		}
		public Function_decContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_dec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterFunction_dec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitFunction_dec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_dec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_decContext function_dec() {
		Function_decContext _localctx = new Function_decContext(Context, State);
		EnterRule(_localctx, 78, RULE_function_dec);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 604;
			Match(ParOpen);
			State = 605;
			symbol();
			State = 606;
			Match(ParOpen);
			State = 610;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ParOpen) {
				{
				{
				State = 607;
				sorted_var();
				}
				}
				State = 612;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 613;
			Match(ParClose);
			State = 614;
			sort();
			State = 615;
			Match(ParClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_defContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SortContext sort() {
			return GetRuleContext<SortContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sorted_varContext[] sorted_var() {
			return GetRuleContexts<Sorted_varContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sorted_varContext sorted_var(int i) {
			return GetRuleContext<Sorted_varContext>(i);
		}
		public Function_defContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_def; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterFunction_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitFunction_def(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_def(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_defContext function_def() {
		Function_defContext _localctx = new Function_defContext(Context, State);
		EnterRule(_localctx, 80, RULE_function_def);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 617;
			symbol();
			State = 618;
			Match(ParOpen);
			State = 622;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ParOpen) {
				{
				{
				State = 619;
				sorted_var();
				}
				}
				State = 624;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 625;
			Match(ParClose);
			State = 626;
			sort();
			State = 627;
			term();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Prop_literalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Not() { return GetToken(SMTLIBv2Parser.PS_Not, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		public Prop_literalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prop_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterProp_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitProp_literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProp_literal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Prop_literalContext prop_literal() {
		Prop_literalContext _localctx = new Prop_literalContext(Context, State);
		EnterRule(_localctx, 82, RULE_prop_literal);
		try {
			State = 635;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case QuotedSymbol:
			case PS_Not:
			case PS_Bool:
			case PS_ContinuedExecution:
			case PS_Error:
			case PS_False:
			case PS_ImmediateExit:
			case PS_Incomplete:
			case PS_Logic:
			case PS_Memout:
			case PS_Sat:
			case PS_Success:
			case PS_Theory:
			case PS_True:
			case PS_Unknown:
			case PS_Unsupported:
			case PS_Unsat:
			case UndefinedSymbol:
				EnterOuterAlt(_localctx, 1);
				{
				State = 629;
				symbol();
				}
				break;
			case ParOpen:
				EnterOuterAlt(_localctx, 2);
				{
				State = 630;
				Match(ParOpen);
				State = 631;
				Match(PS_Not);
				State = 632;
				symbol();
				State = 633;
				Match(ParClose);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScriptContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext[] command() {
			return GetRuleContexts<CommandContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommandContext command(int i) {
			return GetRuleContext<CommandContext>(i);
		}
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterScript(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitScript(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 84, RULE_script);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 640;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ParOpen) {
				{
				{
				State = 637;
				command();
				}
				}
				State = 642;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_assertContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_Assert() { return GetToken(SMTLIBv2Parser.CMD_Assert, 0); }
		public Cmd_assertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_assert; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_assert(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_assert(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_assert(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_assertContext cmd_assert() {
		Cmd_assertContext _localctx = new Cmd_assertContext(Context, State);
		EnterRule(_localctx, 86, RULE_cmd_assert);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 643;
			Match(CMD_Assert);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_checkSatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_CheckSat() { return GetToken(SMTLIBv2Parser.CMD_CheckSat, 0); }
		public Cmd_checkSatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_checkSat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_checkSat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_checkSat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_checkSat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_checkSatContext cmd_checkSat() {
		Cmd_checkSatContext _localctx = new Cmd_checkSatContext(Context, State);
		EnterRule(_localctx, 88, RULE_cmd_checkSat);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 645;
			Match(CMD_CheckSat);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_checkSatAssumingContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_CheckSatAssuming() { return GetToken(SMTLIBv2Parser.CMD_CheckSatAssuming, 0); }
		public Cmd_checkSatAssumingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_checkSatAssuming; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_checkSatAssuming(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_checkSatAssuming(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_checkSatAssuming(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_checkSatAssumingContext cmd_checkSatAssuming() {
		Cmd_checkSatAssumingContext _localctx = new Cmd_checkSatAssumingContext(Context, State);
		EnterRule(_localctx, 90, RULE_cmd_checkSatAssuming);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 647;
			Match(CMD_CheckSatAssuming);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_declareConstContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_DeclareConst() { return GetToken(SMTLIBv2Parser.CMD_DeclareConst, 0); }
		public Cmd_declareConstContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_declareConst; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_declareConst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_declareConst(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_declareConst(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_declareConstContext cmd_declareConst() {
		Cmd_declareConstContext _localctx = new Cmd_declareConstContext(Context, State);
		EnterRule(_localctx, 92, RULE_cmd_declareConst);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 649;
			Match(CMD_DeclareConst);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_declareDatatypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_DeclareDatatype() { return GetToken(SMTLIBv2Parser.CMD_DeclareDatatype, 0); }
		public Cmd_declareDatatypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_declareDatatype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_declareDatatype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_declareDatatype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_declareDatatype(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_declareDatatypeContext cmd_declareDatatype() {
		Cmd_declareDatatypeContext _localctx = new Cmd_declareDatatypeContext(Context, State);
		EnterRule(_localctx, 94, RULE_cmd_declareDatatype);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 651;
			Match(CMD_DeclareDatatype);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_declareDatatypesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_DeclareDatatypes() { return GetToken(SMTLIBv2Parser.CMD_DeclareDatatypes, 0); }
		public Cmd_declareDatatypesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_declareDatatypes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_declareDatatypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_declareDatatypes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_declareDatatypes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_declareDatatypesContext cmd_declareDatatypes() {
		Cmd_declareDatatypesContext _localctx = new Cmd_declareDatatypesContext(Context, State);
		EnterRule(_localctx, 96, RULE_cmd_declareDatatypes);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 653;
			Match(CMD_DeclareDatatypes);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_declareFunContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_DeclareFun() { return GetToken(SMTLIBv2Parser.CMD_DeclareFun, 0); }
		public Cmd_declareFunContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_declareFun; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_declareFun(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_declareFun(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_declareFun(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_declareFunContext cmd_declareFun() {
		Cmd_declareFunContext _localctx = new Cmd_declareFunContext(Context, State);
		EnterRule(_localctx, 98, RULE_cmd_declareFun);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 655;
			Match(CMD_DeclareFun);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_declareSortContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_DeclareSort() { return GetToken(SMTLIBv2Parser.CMD_DeclareSort, 0); }
		public Cmd_declareSortContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_declareSort; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_declareSort(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_declareSort(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_declareSort(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_declareSortContext cmd_declareSort() {
		Cmd_declareSortContext _localctx = new Cmd_declareSortContext(Context, State);
		EnterRule(_localctx, 100, RULE_cmd_declareSort);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 657;
			Match(CMD_DeclareSort);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_defineFunContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_DefineFun() { return GetToken(SMTLIBv2Parser.CMD_DefineFun, 0); }
		public Cmd_defineFunContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_defineFun; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_defineFun(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_defineFun(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_defineFun(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_defineFunContext cmd_defineFun() {
		Cmd_defineFunContext _localctx = new Cmd_defineFunContext(Context, State);
		EnterRule(_localctx, 102, RULE_cmd_defineFun);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 659;
			Match(CMD_DefineFun);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_defineFunRecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_DefineFunRec() { return GetToken(SMTLIBv2Parser.CMD_DefineFunRec, 0); }
		public Cmd_defineFunRecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_defineFunRec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_defineFunRec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_defineFunRec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_defineFunRec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_defineFunRecContext cmd_defineFunRec() {
		Cmd_defineFunRecContext _localctx = new Cmd_defineFunRecContext(Context, State);
		EnterRule(_localctx, 104, RULE_cmd_defineFunRec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 661;
			Match(CMD_DefineFunRec);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_defineFunsRecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_DefineFunsRec() { return GetToken(SMTLIBv2Parser.CMD_DefineFunsRec, 0); }
		public Cmd_defineFunsRecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_defineFunsRec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_defineFunsRec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_defineFunsRec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_defineFunsRec(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_defineFunsRecContext cmd_defineFunsRec() {
		Cmd_defineFunsRecContext _localctx = new Cmd_defineFunsRecContext(Context, State);
		EnterRule(_localctx, 106, RULE_cmd_defineFunsRec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 663;
			Match(CMD_DefineFunsRec);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_defineSortContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_DefineSort() { return GetToken(SMTLIBv2Parser.CMD_DefineSort, 0); }
		public Cmd_defineSortContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_defineSort; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_defineSort(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_defineSort(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_defineSort(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_defineSortContext cmd_defineSort() {
		Cmd_defineSortContext _localctx = new Cmd_defineSortContext(Context, State);
		EnterRule(_localctx, 108, RULE_cmd_defineSort);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 665;
			Match(CMD_DefineSort);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_echoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_Echo() { return GetToken(SMTLIBv2Parser.CMD_Echo, 0); }
		public Cmd_echoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_echo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_echo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_echo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_echo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_echoContext cmd_echo() {
		Cmd_echoContext _localctx = new Cmd_echoContext(Context, State);
		EnterRule(_localctx, 110, RULE_cmd_echo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 667;
			Match(CMD_Echo);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_exitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_Exit() { return GetToken(SMTLIBv2Parser.CMD_Exit, 0); }
		public Cmd_exitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_exit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_exit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_exit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_exit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_exitContext cmd_exit() {
		Cmd_exitContext _localctx = new Cmd_exitContext(Context, State);
		EnterRule(_localctx, 112, RULE_cmd_exit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 669;
			Match(CMD_Exit);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_getAssertionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_GetAssertions() { return GetToken(SMTLIBv2Parser.CMD_GetAssertions, 0); }
		public Cmd_getAssertionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_getAssertions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_getAssertions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_getAssertions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_getAssertions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_getAssertionsContext cmd_getAssertions() {
		Cmd_getAssertionsContext _localctx = new Cmd_getAssertionsContext(Context, State);
		EnterRule(_localctx, 114, RULE_cmd_getAssertions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 671;
			Match(CMD_GetAssertions);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_getAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_GetAssignment() { return GetToken(SMTLIBv2Parser.CMD_GetAssignment, 0); }
		public Cmd_getAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_getAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_getAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_getAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_getAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_getAssignmentContext cmd_getAssignment() {
		Cmd_getAssignmentContext _localctx = new Cmd_getAssignmentContext(Context, State);
		EnterRule(_localctx, 116, RULE_cmd_getAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 673;
			Match(CMD_GetAssignment);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_getInfoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_GetInfo() { return GetToken(SMTLIBv2Parser.CMD_GetInfo, 0); }
		public Cmd_getInfoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_getInfo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_getInfo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_getInfo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_getInfo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_getInfoContext cmd_getInfo() {
		Cmd_getInfoContext _localctx = new Cmd_getInfoContext(Context, State);
		EnterRule(_localctx, 118, RULE_cmd_getInfo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 675;
			Match(CMD_GetInfo);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_getModelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_GetModel() { return GetToken(SMTLIBv2Parser.CMD_GetModel, 0); }
		public Cmd_getModelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_getModel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_getModel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_getModel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_getModel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_getModelContext cmd_getModel() {
		Cmd_getModelContext _localctx = new Cmd_getModelContext(Context, State);
		EnterRule(_localctx, 120, RULE_cmd_getModel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 677;
			Match(CMD_GetModel);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_getOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_GetOption() { return GetToken(SMTLIBv2Parser.CMD_GetOption, 0); }
		public Cmd_getOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_getOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_getOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_getOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_getOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_getOptionContext cmd_getOption() {
		Cmd_getOptionContext _localctx = new Cmd_getOptionContext(Context, State);
		EnterRule(_localctx, 122, RULE_cmd_getOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 679;
			Match(CMD_GetOption);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_getProofContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_GetProof() { return GetToken(SMTLIBv2Parser.CMD_GetProof, 0); }
		public Cmd_getProofContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_getProof; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_getProof(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_getProof(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_getProof(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_getProofContext cmd_getProof() {
		Cmd_getProofContext _localctx = new Cmd_getProofContext(Context, State);
		EnterRule(_localctx, 124, RULE_cmd_getProof);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 681;
			Match(CMD_GetProof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_getUnsatAssumptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_GetUnsatAssumptions() { return GetToken(SMTLIBv2Parser.CMD_GetUnsatAssumptions, 0); }
		public Cmd_getUnsatAssumptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_getUnsatAssumptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_getUnsatAssumptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_getUnsatAssumptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_getUnsatAssumptions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_getUnsatAssumptionsContext cmd_getUnsatAssumptions() {
		Cmd_getUnsatAssumptionsContext _localctx = new Cmd_getUnsatAssumptionsContext(Context, State);
		EnterRule(_localctx, 126, RULE_cmd_getUnsatAssumptions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 683;
			Match(CMD_GetUnsatAssumptions);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_getUnsatCoreContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_GetUnsatCore() { return GetToken(SMTLIBv2Parser.CMD_GetUnsatCore, 0); }
		public Cmd_getUnsatCoreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_getUnsatCore; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_getUnsatCore(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_getUnsatCore(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_getUnsatCore(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_getUnsatCoreContext cmd_getUnsatCore() {
		Cmd_getUnsatCoreContext _localctx = new Cmd_getUnsatCoreContext(Context, State);
		EnterRule(_localctx, 128, RULE_cmd_getUnsatCore);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 685;
			Match(CMD_GetUnsatCore);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_getValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_GetValue() { return GetToken(SMTLIBv2Parser.CMD_GetValue, 0); }
		public Cmd_getValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_getValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_getValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_getValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_getValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_getValueContext cmd_getValue() {
		Cmd_getValueContext _localctx = new Cmd_getValueContext(Context, State);
		EnterRule(_localctx, 130, RULE_cmd_getValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 687;
			Match(CMD_GetValue);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_lemmaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_Lemma() { return GetToken(SMTLIBv2Parser.CMD_Lemma, 0); }
		public Cmd_lemmaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_lemma; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_lemma(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_lemma(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_lemma(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_lemmaContext cmd_lemma() {
		Cmd_lemmaContext _localctx = new Cmd_lemmaContext(Context, State);
		EnterRule(_localctx, 132, RULE_cmd_lemma);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 689;
			Match(CMD_Lemma);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_popContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_Pop() { return GetToken(SMTLIBv2Parser.CMD_Pop, 0); }
		public Cmd_popContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_pop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_pop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_pop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_pop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_popContext cmd_pop() {
		Cmd_popContext _localctx = new Cmd_popContext(Context, State);
		EnterRule(_localctx, 134, RULE_cmd_pop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 691;
			Match(CMD_Pop);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_pushContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_Push() { return GetToken(SMTLIBv2Parser.CMD_Push, 0); }
		public Cmd_pushContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_push; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_push(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_push(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_push(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_pushContext cmd_push() {
		Cmd_pushContext _localctx = new Cmd_pushContext(Context, State);
		EnterRule(_localctx, 136, RULE_cmd_push);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 693;
			Match(CMD_Push);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_resetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_Reset() { return GetToken(SMTLIBv2Parser.CMD_Reset, 0); }
		public Cmd_resetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_reset; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_reset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_reset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_reset(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_resetContext cmd_reset() {
		Cmd_resetContext _localctx = new Cmd_resetContext(Context, State);
		EnterRule(_localctx, 138, RULE_cmd_reset);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 695;
			Match(CMD_Reset);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_resetAssertionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_ResetAssertions() { return GetToken(SMTLIBv2Parser.CMD_ResetAssertions, 0); }
		public Cmd_resetAssertionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_resetAssertions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_resetAssertions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_resetAssertions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_resetAssertions(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_resetAssertionsContext cmd_resetAssertions() {
		Cmd_resetAssertionsContext _localctx = new Cmd_resetAssertionsContext(Context, State);
		EnterRule(_localctx, 140, RULE_cmd_resetAssertions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 697;
			Match(CMD_ResetAssertions);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_setInfoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_SetInfo() { return GetToken(SMTLIBv2Parser.CMD_SetInfo, 0); }
		public Cmd_setInfoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_setInfo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_setInfo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_setInfo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_setInfo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_setInfoContext cmd_setInfo() {
		Cmd_setInfoContext _localctx = new Cmd_setInfoContext(Context, State);
		EnterRule(_localctx, 142, RULE_cmd_setInfo);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 699;
			Match(CMD_SetInfo);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_setLogicContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_SetLogic() { return GetToken(SMTLIBv2Parser.CMD_SetLogic, 0); }
		public Cmd_setLogicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_setLogic; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_setLogic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_setLogic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_setLogic(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_setLogicContext cmd_setLogic() {
		Cmd_setLogicContext _localctx = new Cmd_setLogicContext(Context, State);
		EnterRule(_localctx, 144, RULE_cmd_setLogic);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 701;
			Match(CMD_SetLogic);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Cmd_setOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_SetOption() { return GetToken(SMTLIBv2Parser.CMD_SetOption, 0); }
		public Cmd_setOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cmd_setOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCmd_setOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCmd_setOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCmd_setOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Cmd_setOptionContext cmd_setOption() {
		Cmd_setOptionContext _localctx = new Cmd_setOptionContext(Context, State);
		EnterRule(_localctx, 146, RULE_cmd_setOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 703;
			Match(CMD_SetOption);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ParOpen() { return GetTokens(SMTLIBv2Parser.ParOpen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen(int i) {
			return GetToken(SMTLIBv2Parser.ParOpen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_assertContext cmd_assert() {
			return GetRuleContext<Cmd_assertContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ParClose() { return GetTokens(SMTLIBv2Parser.ParClose); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose(int i) {
			return GetToken(SMTLIBv2Parser.ParClose, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_checkSatContext cmd_checkSat() {
			return GetRuleContext<Cmd_checkSatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_checkSatAssumingContext cmd_checkSatAssuming() {
			return GetRuleContext<Cmd_checkSatAssumingContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_declareConstContext cmd_declareConst() {
			return GetRuleContext<Cmd_declareConstContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext[] symbol() {
			return GetRuleContexts<SymbolContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol(int i) {
			return GetRuleContext<SymbolContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortContext[] sort() {
			return GetRuleContexts<SortContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SortContext sort(int i) {
			return GetRuleContext<SortContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_declareDatatypeContext cmd_declareDatatype() {
			return GetRuleContext<Cmd_declareDatatypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Datatype_decContext[] datatype_dec() {
			return GetRuleContexts<Datatype_decContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Datatype_decContext datatype_dec(int i) {
			return GetRuleContext<Datatype_decContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_declareDatatypesContext cmd_declareDatatypes() {
			return GetRuleContext<Cmd_declareDatatypesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sort_decContext[] sort_dec() {
			return GetRuleContexts<Sort_decContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sort_decContext sort_dec(int i) {
			return GetRuleContext<Sort_decContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_declareFunContext cmd_declareFun() {
			return GetRuleContext<Cmd_declareFunContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_declareSortContext cmd_declareSort() {
			return GetRuleContext<Cmd_declareSortContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumeralContext numeral() {
			return GetRuleContext<NumeralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_defineFunContext cmd_defineFun() {
			return GetRuleContext<Cmd_defineFunContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_defContext function_def() {
			return GetRuleContext<Function_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_defineFunRecContext cmd_defineFunRec() {
			return GetRuleContext<Cmd_defineFunRecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_defineFunsRecContext cmd_defineFunsRec() {
			return GetRuleContext<Cmd_defineFunsRecContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_decContext[] function_dec() {
			return GetRuleContexts<Function_decContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_decContext function_dec(int i) {
			return GetRuleContext<Function_decContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_defineSortContext cmd_defineSort() {
			return GetRuleContext<Cmd_defineSortContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_echoContext cmd_echo() {
			return GetRuleContext<Cmd_echoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_exitContext cmd_exit() {
			return GetRuleContext<Cmd_exitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_getAssertionsContext cmd_getAssertions() {
			return GetRuleContext<Cmd_getAssertionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_getAssignmentContext cmd_getAssignment() {
			return GetRuleContext<Cmd_getAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_getInfoContext cmd_getInfo() {
			return GetRuleContext<Cmd_getInfoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Info_flagContext info_flag() {
			return GetRuleContext<Info_flagContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_getModelContext cmd_getModel() {
			return GetRuleContext<Cmd_getModelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_getOptionContext cmd_getOption() {
			return GetRuleContext<Cmd_getOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_getProofContext cmd_getProof() {
			return GetRuleContext<Cmd_getProofContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_getUnsatAssumptionsContext cmd_getUnsatAssumptions() {
			return GetRuleContext<Cmd_getUnsatAssumptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_getUnsatCoreContext cmd_getUnsatCore() {
			return GetRuleContext<Cmd_getUnsatCoreContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_getValueContext cmd_getValue() {
			return GetRuleContext<Cmd_getValueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_lemmaContext cmd_lemma() {
			return GetRuleContext<Cmd_lemmaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sorted_varContext[] sorted_var() {
			return GetRuleContexts<Sorted_varContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Sorted_varContext sorted_var(int i) {
			return GetRuleContext<Sorted_varContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_popContext cmd_pop() {
			return GetRuleContext<Cmd_popContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_pushContext cmd_push() {
			return GetRuleContext<Cmd_pushContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_resetContext cmd_reset() {
			return GetRuleContext<Cmd_resetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_resetAssertionsContext cmd_resetAssertions() {
			return GetRuleContext<Cmd_resetAssertionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_setInfoContext cmd_setInfo() {
			return GetRuleContext<Cmd_setInfoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_setLogicContext cmd_setLogic() {
			return GetRuleContext<Cmd_setLogicContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Cmd_setOptionContext cmd_setOption() {
			return GetRuleContext<Cmd_setOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionContext option() {
			return GetRuleContext<OptionContext>(0);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 148, RULE_command);
		int _la;
		try {
			State = 911;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 705;
				Match(ParOpen);
				State = 706;
				cmd_assert();
				State = 707;
				term();
				State = 708;
				Match(ParClose);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 710;
				Match(ParOpen);
				State = 711;
				cmd_checkSat();
				State = 712;
				Match(ParClose);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 714;
				Match(ParOpen);
				State = 715;
				cmd_checkSatAssuming();
				State = 716;
				Match(ParClose);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 718;
				Match(ParOpen);
				State = 719;
				cmd_declareConst();
				State = 720;
				symbol();
				State = 721;
				sort();
				State = 722;
				Match(ParClose);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 724;
				Match(ParOpen);
				State = 725;
				cmd_declareDatatype();
				State = 726;
				symbol();
				State = 727;
				datatype_dec();
				State = 728;
				Match(ParClose);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 730;
				Match(ParOpen);
				State = 731;
				cmd_declareDatatypes();
				State = 732;
				Match(ParOpen);
				State = 734;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 733;
					sort_dec();
					}
					}
					State = 736;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ParOpen );
				State = 738;
				Match(ParClose);
				State = 739;
				Match(ParOpen);
				State = 741;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 740;
					datatype_dec();
					}
					}
					State = 743;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ParOpen );
				State = 745;
				Match(ParClose);
				State = 746;
				Match(ParClose);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 748;
				Match(ParOpen);
				State = 749;
				cmd_declareFun();
				State = 750;
				symbol();
				State = 751;
				Match(ParOpen);
				State = 755;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ParOpen) | (1L << QuotedSymbol) | (1L << PS_Not) | (1L << PS_Bool) | (1L << PS_ContinuedExecution) | (1L << PS_Error) | (1L << PS_False) | (1L << PS_ImmediateExit) | (1L << PS_Incomplete) | (1L << PS_Logic) | (1L << PS_Memout) | (1L << PS_Sat) | (1L << PS_Success) | (1L << PS_Theory) | (1L << PS_True) | (1L << PS_Unknown) | (1L << PS_Unsupported) | (1L << PS_Unsat))) != 0) || _la==UndefinedSymbol) {
					{
					{
					State = 752;
					sort();
					}
					}
					State = 757;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 758;
				Match(ParClose);
				State = 759;
				sort();
				State = 760;
				Match(ParClose);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 762;
				Match(ParOpen);
				State = 763;
				cmd_declareSort();
				State = 764;
				symbol();
				State = 765;
				numeral();
				State = 766;
				Match(ParClose);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 768;
				Match(ParOpen);
				State = 769;
				cmd_defineFun();
				State = 770;
				function_def();
				State = 771;
				Match(ParClose);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 773;
				Match(ParOpen);
				State = 774;
				cmd_defineFunRec();
				State = 775;
				function_def();
				State = 776;
				Match(ParClose);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 778;
				Match(ParOpen);
				State = 779;
				cmd_defineFunsRec();
				State = 780;
				Match(ParOpen);
				State = 782;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 781;
					function_dec();
					}
					}
					State = 784;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ParOpen );
				State = 786;
				Match(ParClose);
				State = 787;
				Match(ParOpen);
				State = 789;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 788;
					term();
					}
					}
					State = 791;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ParOpen) | (1L << String) | (1L << QuotedSymbol) | (1L << PS_Not) | (1L << PS_Bool) | (1L << PS_ContinuedExecution) | (1L << PS_Error) | (1L << PS_False) | (1L << PS_ImmediateExit) | (1L << PS_Incomplete) | (1L << PS_Logic) | (1L << PS_Memout) | (1L << PS_Sat) | (1L << PS_Success) | (1L << PS_Theory) | (1L << PS_True) | (1L << PS_Unknown) | (1L << PS_Unsupported) | (1L << PS_Unsat))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (Numeral - 67)) | (1L << (Binary - 67)) | (1L << (HexDecimal - 67)) | (1L << (Decimal - 67)) | (1L << (UndefinedSymbol - 67)))) != 0) );
				State = 793;
				Match(ParClose);
				State = 794;
				Match(ParClose);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 796;
				Match(ParOpen);
				State = 797;
				cmd_defineSort();
				State = 798;
				symbol();
				State = 799;
				Match(ParOpen);
				State = 803;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QuotedSymbol) | (1L << PS_Not) | (1L << PS_Bool) | (1L << PS_ContinuedExecution) | (1L << PS_Error) | (1L << PS_False) | (1L << PS_ImmediateExit) | (1L << PS_Incomplete) | (1L << PS_Logic) | (1L << PS_Memout) | (1L << PS_Sat) | (1L << PS_Success) | (1L << PS_Theory) | (1L << PS_True) | (1L << PS_Unknown) | (1L << PS_Unsupported) | (1L << PS_Unsat))) != 0) || _la==UndefinedSymbol) {
					{
					{
					State = 800;
					symbol();
					}
					}
					State = 805;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 806;
				Match(ParClose);
				State = 807;
				sort();
				State = 808;
				Match(ParClose);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 810;
				Match(ParOpen);
				State = 811;
				cmd_echo();
				State = 812;
				@string();
				State = 813;
				Match(ParClose);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 815;
				Match(ParOpen);
				State = 816;
				cmd_exit();
				State = 817;
				Match(ParClose);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 819;
				Match(ParOpen);
				State = 820;
				cmd_getAssertions();
				State = 821;
				Match(ParClose);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 823;
				Match(ParOpen);
				State = 824;
				cmd_getAssignment();
				State = 825;
				Match(ParClose);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 827;
				Match(ParOpen);
				State = 828;
				cmd_getInfo();
				State = 829;
				info_flag();
				State = 830;
				Match(ParClose);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 832;
				Match(ParOpen);
				State = 833;
				cmd_getModel();
				State = 834;
				Match(ParClose);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 836;
				Match(ParOpen);
				State = 837;
				cmd_getOption();
				State = 838;
				keyword();
				State = 839;
				Match(ParClose);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 841;
				Match(ParOpen);
				State = 842;
				cmd_getProof();
				State = 843;
				Match(ParClose);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 845;
				Match(ParOpen);
				State = 846;
				cmd_getUnsatAssumptions();
				State = 847;
				Match(ParClose);
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 849;
				Match(ParOpen);
				State = 850;
				cmd_getUnsatCore();
				State = 851;
				Match(ParClose);
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 853;
				Match(ParOpen);
				State = 854;
				cmd_getValue();
				State = 855;
				Match(ParOpen);
				State = 857;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 856;
					term();
					}
					}
					State = 859;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ParOpen) | (1L << String) | (1L << QuotedSymbol) | (1L << PS_Not) | (1L << PS_Bool) | (1L << PS_ContinuedExecution) | (1L << PS_Error) | (1L << PS_False) | (1L << PS_ImmediateExit) | (1L << PS_Incomplete) | (1L << PS_Logic) | (1L << PS_Memout) | (1L << PS_Sat) | (1L << PS_Success) | (1L << PS_Theory) | (1L << PS_True) | (1L << PS_Unknown) | (1L << PS_Unsupported) | (1L << PS_Unsat))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (Numeral - 67)) | (1L << (Binary - 67)) | (1L << (HexDecimal - 67)) | (1L << (Decimal - 67)) | (1L << (UndefinedSymbol - 67)))) != 0) );
				State = 861;
				Match(ParClose);
				State = 862;
				Match(ParClose);
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 864;
				Match(ParOpen);
				State = 865;
				cmd_lemma();
				State = 866;
				symbol();
				State = 867;
				Match(ParOpen);
				State = 871;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==ParOpen) {
					{
					{
					State = 868;
					sorted_var();
					}
					}
					State = 873;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 874;
				Match(ParClose);
				State = 875;
				term();
				State = 876;
				Match(ParClose);
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 878;
				Match(ParOpen);
				State = 879;
				cmd_pop();
				State = 880;
				numeral();
				State = 881;
				Match(ParClose);
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 883;
				Match(ParOpen);
				State = 884;
				cmd_push();
				State = 885;
				numeral();
				State = 886;
				Match(ParClose);
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 888;
				Match(ParOpen);
				State = 889;
				cmd_reset();
				State = 890;
				Match(ParClose);
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 892;
				Match(ParOpen);
				State = 893;
				cmd_resetAssertions();
				State = 894;
				Match(ParClose);
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 896;
				Match(ParOpen);
				State = 897;
				cmd_setInfo();
				State = 898;
				attribute();
				State = 899;
				Match(ParClose);
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 901;
				Match(ParOpen);
				State = 902;
				cmd_setLogic();
				State = 903;
				symbol();
				State = 904;
				Match(ParClose);
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 906;
				Match(ParOpen);
				State = 907;
				cmd_setOption();
				State = 908;
				option();
				State = 909;
				Match(ParClose);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class B_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_True() { return GetToken(SMTLIBv2Parser.PS_True, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_False() { return GetToken(SMTLIBv2Parser.PS_False, 0); }
		public B_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_b_value; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterB_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitB_value(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitB_value(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public B_valueContext b_value() {
		B_valueContext _localctx = new B_valueContext(Context, State);
		EnterRule(_localctx, 150, RULE_b_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 913;
			_la = TokenStream.LA(1);
			if ( !(_la==PS_False || _la==PS_True) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_DiagnosticOutputChannel() { return GetToken(SMTLIBv2Parser.PK_DiagnosticOutputChannel, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_GlobalDeclarations() { return GetToken(SMTLIBv2Parser.PK_GlobalDeclarations, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public B_valueContext b_value() {
			return GetRuleContext<B_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_InteractiveMode() { return GetToken(SMTLIBv2Parser.PK_InteractiveMode, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_PrintSuccess() { return GetToken(SMTLIBv2Parser.PK_PrintSuccess, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_ProduceAssertions() { return GetToken(SMTLIBv2Parser.PK_ProduceAssertions, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_ProduceAssignments() { return GetToken(SMTLIBv2Parser.PK_ProduceAssignments, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_ProduceModels() { return GetToken(SMTLIBv2Parser.PK_ProduceModels, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_ProduceProofs() { return GetToken(SMTLIBv2Parser.PK_ProduceProofs, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_ProduceUnsatAssumptions() { return GetToken(SMTLIBv2Parser.PK_ProduceUnsatAssumptions, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_ProduceUnsatCores() { return GetToken(SMTLIBv2Parser.PK_ProduceUnsatCores, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_RandomSeed() { return GetToken(SMTLIBv2Parser.PK_RandomSeed, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumeralContext numeral() {
			return GetRuleContext<NumeralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_RegularOutputChannel() { return GetToken(SMTLIBv2Parser.PK_RegularOutputChannel, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_ReproducibleResourceLimit() { return GetToken(SMTLIBv2Parser.PK_ReproducibleResourceLimit, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Verbosity() { return GetToken(SMTLIBv2Parser.PK_Verbosity, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		public OptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_option; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOption(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OptionContext option() {
		OptionContext _localctx = new OptionContext(Context, State);
		EnterRule(_localctx, 152, RULE_option);
		try {
			State = 944;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 915;
				Match(PK_DiagnosticOutputChannel);
				State = 916;
				@string();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 917;
				Match(PK_GlobalDeclarations);
				State = 918;
				b_value();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 919;
				Match(PK_InteractiveMode);
				State = 920;
				b_value();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 921;
				Match(PK_PrintSuccess);
				State = 922;
				b_value();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 923;
				Match(PK_ProduceAssertions);
				State = 924;
				b_value();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 925;
				Match(PK_ProduceAssignments);
				State = 926;
				b_value();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 927;
				Match(PK_ProduceModels);
				State = 928;
				b_value();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 929;
				Match(PK_ProduceProofs);
				State = 930;
				b_value();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 931;
				Match(PK_ProduceUnsatAssumptions);
				State = 932;
				b_value();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 933;
				Match(PK_ProduceUnsatCores);
				State = 934;
				b_value();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 935;
				Match(PK_RandomSeed);
				State = 936;
				numeral();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 937;
				Match(PK_RegularOutputChannel);
				State = 938;
				@string();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 939;
				Match(PK_ReproducibleResourceLimit);
				State = 940;
				numeral();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 941;
				Match(PK_Verbosity);
				State = 942;
				numeral();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 943;
				attribute();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Info_flagContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_AllStatistics() { return GetToken(SMTLIBv2Parser.PK_AllStatistics, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_AssertionStackLevels() { return GetToken(SMTLIBv2Parser.PK_AssertionStackLevels, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Authors() { return GetToken(SMTLIBv2Parser.PK_Authors, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_ErrorBehaviour() { return GetToken(SMTLIBv2Parser.PK_ErrorBehaviour, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Name() { return GetToken(SMTLIBv2Parser.PK_Name, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_ReasonUnknown() { return GetToken(SMTLIBv2Parser.PK_ReasonUnknown, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Version() { return GetToken(SMTLIBv2Parser.PK_Version, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public Info_flagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_info_flag; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterInfo_flag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitInfo_flag(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInfo_flag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Info_flagContext info_flag() {
		Info_flagContext _localctx = new Info_flagContext(Context, State);
		EnterRule(_localctx, 154, RULE_info_flag);
		try {
			State = 954;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 946;
				Match(PK_AllStatistics);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 947;
				Match(PK_AssertionStackLevels);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 948;
				Match(PK_Authors);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 949;
				Match(PK_ErrorBehaviour);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 950;
				Match(PK_Name);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 951;
				Match(PK_ReasonUnknown);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 952;
				Match(PK_Version);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 953;
				keyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Error_behaviourContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_ImmediateExit() { return GetToken(SMTLIBv2Parser.PS_ImmediateExit, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_ContinuedExecution() { return GetToken(SMTLIBv2Parser.PS_ContinuedExecution, 0); }
		public Error_behaviourContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_error_behaviour; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterError_behaviour(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitError_behaviour(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitError_behaviour(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Error_behaviourContext error_behaviour() {
		Error_behaviourContext _localctx = new Error_behaviourContext(Context, State);
		EnterRule(_localctx, 156, RULE_error_behaviour);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 956;
			_la = TokenStream.LA(1);
			if ( !(_la==PS_ContinuedExecution || _la==PS_ImmediateExit) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Reason_unknownContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Memout() { return GetToken(SMTLIBv2Parser.PS_Memout, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Incomplete() { return GetToken(SMTLIBv2Parser.PS_Incomplete, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public S_exprContext s_expr() {
			return GetRuleContext<S_exprContext>(0);
		}
		public Reason_unknownContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reason_unknown; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterReason_unknown(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitReason_unknown(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReason_unknown(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Reason_unknownContext reason_unknown() {
		Reason_unknownContext _localctx = new Reason_unknownContext(Context, State);
		EnterRule(_localctx, 158, RULE_reason_unknown);
		try {
			State = 961;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 958;
				Match(PS_Memout);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 959;
				Match(PS_Incomplete);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 960;
				s_expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Model_responseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ParOpen() { return GetTokens(SMTLIBv2Parser.ParOpen); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen(int i) {
			return GetToken(SMTLIBv2Parser.ParOpen, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_DefineFun() { return GetToken(SMTLIBv2Parser.CMD_DefineFun, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_defContext function_def() {
			return GetRuleContext<Function_defContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ParClose() { return GetTokens(SMTLIBv2Parser.ParClose); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose(int i) {
			return GetToken(SMTLIBv2Parser.ParClose, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_DefineFunRec() { return GetToken(SMTLIBv2Parser.CMD_DefineFunRec, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CMD_DefineFunsRec() { return GetToken(SMTLIBv2Parser.CMD_DefineFunsRec, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Function_decContext[] function_dec() {
			return GetRuleContexts<Function_decContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_decContext function_dec(int i) {
			return GetRuleContext<Function_decContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public Model_responseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_model_response; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterModel_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitModel_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModel_response(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Model_responseContext model_response() {
		Model_responseContext _localctx = new Model_responseContext(Context, State);
		EnterRule(_localctx, 160, RULE_model_response);
		int _la;
		try {
			State = 991;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 963;
				Match(ParOpen);
				State = 964;
				Match(CMD_DefineFun);
				State = 965;
				function_def();
				State = 966;
				Match(ParClose);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 968;
				Match(ParOpen);
				State = 969;
				Match(CMD_DefineFunRec);
				State = 970;
				function_def();
				State = 971;
				Match(ParClose);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 973;
				Match(ParOpen);
				State = 974;
				Match(CMD_DefineFunsRec);
				State = 975;
				Match(ParOpen);
				State = 977;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 976;
					function_dec();
					}
					}
					State = 979;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==ParOpen );
				State = 981;
				Match(ParClose);
				State = 982;
				Match(ParOpen);
				State = 984;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 983;
					term();
					}
					}
					State = 986;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ParOpen) | (1L << String) | (1L << QuotedSymbol) | (1L << PS_Not) | (1L << PS_Bool) | (1L << PS_ContinuedExecution) | (1L << PS_Error) | (1L << PS_False) | (1L << PS_ImmediateExit) | (1L << PS_Incomplete) | (1L << PS_Logic) | (1L << PS_Memout) | (1L << PS_Sat) | (1L << PS_Success) | (1L << PS_Theory) | (1L << PS_True) | (1L << PS_Unknown) | (1L << PS_Unsupported) | (1L << PS_Unsat))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (Numeral - 67)) | (1L << (Binary - 67)) | (1L << (HexDecimal - 67)) | (1L << (Decimal - 67)) | (1L << (UndefinedSymbol - 67)))) != 0) );
				State = 988;
				Match(ParClose);
				State = 989;
				Match(ParClose);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Info_responseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_AssertionStackLevels() { return GetToken(SMTLIBv2Parser.PK_AssertionStackLevels, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NumeralContext numeral() {
			return GetRuleContext<NumeralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Authors() { return GetToken(SMTLIBv2Parser.PK_Authors, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_ErrorBehaviour() { return GetToken(SMTLIBv2Parser.PK_ErrorBehaviour, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Error_behaviourContext error_behaviour() {
			return GetRuleContext<Error_behaviourContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Name() { return GetToken(SMTLIBv2Parser.PK_Name, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_ReasonUnknown() { return GetToken(SMTLIBv2Parser.PK_ReasonUnknown, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Reason_unknownContext reason_unknown() {
			return GetRuleContext<Reason_unknownContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PK_Version() { return GetToken(SMTLIBv2Parser.PK_Version, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		public Info_responseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_info_response; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterInfo_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitInfo_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInfo_response(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Info_responseContext info_response() {
		Info_responseContext _localctx = new Info_responseContext(Context, State);
		EnterRule(_localctx, 162, RULE_info_response);
		try {
			State = 1006;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,65,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 993;
				Match(PK_AssertionStackLevels);
				State = 994;
				numeral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 995;
				Match(PK_Authors);
				State = 996;
				@string();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 997;
				Match(PK_ErrorBehaviour);
				State = 998;
				error_behaviour();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 999;
				Match(PK_Name);
				State = 1000;
				@string();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1001;
				Match(PK_ReasonUnknown);
				State = 1002;
				reason_unknown();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1003;
				Match(PK_Version);
				State = 1004;
				@string();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1005;
				attribute();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Valuation_pairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		public Valuation_pairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valuation_pair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterValuation_pair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitValuation_pair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValuation_pair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Valuation_pairContext valuation_pair() {
		Valuation_pairContext _localctx = new Valuation_pairContext(Context, State);
		EnterRule(_localctx, 164, RULE_valuation_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1008;
			Match(ParOpen);
			State = 1009;
			term();
			State = 1010;
			term();
			State = 1011;
			Match(ParClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class T_valuation_pairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol() {
			return GetRuleContext<SymbolContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public B_valueContext b_value() {
			return GetRuleContext<B_valueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		public T_valuation_pairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_t_valuation_pair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterT_valuation_pair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitT_valuation_pair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitT_valuation_pair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public T_valuation_pairContext t_valuation_pair() {
		T_valuation_pairContext _localctx = new T_valuation_pairContext(Context, State);
		EnterRule(_localctx, 166, RULE_t_valuation_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1013;
			Match(ParOpen);
			State = 1014;
			symbol();
			State = 1015;
			b_value();
			State = 1016;
			Match(ParClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Check_sat_responseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Sat() { return GetToken(SMTLIBv2Parser.PS_Sat, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Unsat() { return GetToken(SMTLIBv2Parser.PS_Unsat, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Unknown() { return GetToken(SMTLIBv2Parser.PS_Unknown, 0); }
		public Check_sat_responseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_check_sat_response; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterCheck_sat_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitCheck_sat_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheck_sat_response(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Check_sat_responseContext check_sat_response() {
		Check_sat_responseContext _localctx = new Check_sat_responseContext(Context, State);
		EnterRule(_localctx, 168, RULE_check_sat_response);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1018;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PS_Sat) | (1L << PS_Unknown) | (1L << PS_Unsat))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Echo_responseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		public Echo_responseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_echo_response; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterEcho_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitEcho_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEcho_response(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Echo_responseContext echo_response() {
		Echo_responseContext _localctx = new Echo_responseContext(Context, State);
		EnterRule(_localctx, 170, RULE_echo_response);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1020;
			@string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Get_assertions_responseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public Get_assertions_responseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_get_assertions_response; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterGet_assertions_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitGet_assertions_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGet_assertions_response(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Get_assertions_responseContext get_assertions_response() {
		Get_assertions_responseContext _localctx = new Get_assertions_responseContext(Context, State);
		EnterRule(_localctx, 172, RULE_get_assertions_response);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1022;
			Match(ParOpen);
			State = 1026;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ParOpen) | (1L << String) | (1L << QuotedSymbol) | (1L << PS_Not) | (1L << PS_Bool) | (1L << PS_ContinuedExecution) | (1L << PS_Error) | (1L << PS_False) | (1L << PS_ImmediateExit) | (1L << PS_Incomplete) | (1L << PS_Logic) | (1L << PS_Memout) | (1L << PS_Sat) | (1L << PS_Success) | (1L << PS_Theory) | (1L << PS_True) | (1L << PS_Unknown) | (1L << PS_Unsupported) | (1L << PS_Unsat))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (Numeral - 67)) | (1L << (Binary - 67)) | (1L << (HexDecimal - 67)) | (1L << (Decimal - 67)) | (1L << (UndefinedSymbol - 67)))) != 0)) {
				{
				{
				State = 1023;
				term();
				}
				}
				State = 1028;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1029;
			Match(ParClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Get_assignment_responseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public T_valuation_pairContext[] t_valuation_pair() {
			return GetRuleContexts<T_valuation_pairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public T_valuation_pairContext t_valuation_pair(int i) {
			return GetRuleContext<T_valuation_pairContext>(i);
		}
		public Get_assignment_responseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_get_assignment_response; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterGet_assignment_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitGet_assignment_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGet_assignment_response(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Get_assignment_responseContext get_assignment_response() {
		Get_assignment_responseContext _localctx = new Get_assignment_responseContext(Context, State);
		EnterRule(_localctx, 174, RULE_get_assignment_response);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1031;
			Match(ParOpen);
			State = 1035;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ParOpen) {
				{
				{
				State = 1032;
				t_valuation_pair();
				}
				}
				State = 1037;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1038;
			Match(ParClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Get_info_responseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Info_responseContext[] info_response() {
			return GetRuleContexts<Info_responseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Info_responseContext info_response(int i) {
			return GetRuleContext<Info_responseContext>(i);
		}
		public Get_info_responseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_get_info_response; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterGet_info_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitGet_info_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGet_info_response(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Get_info_responseContext get_info_response() {
		Get_info_responseContext _localctx = new Get_info_responseContext(Context, State);
		EnterRule(_localctx, 176, RULE_get_info_response);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1040;
			Match(ParOpen);
			State = 1042;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1041;
				info_response();
				}
				}
				State = 1044;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (Colon - 71)) | (1L << (PK_AllStatistics - 71)) | (1L << (PK_AssertionStackLevels - 71)) | (1L << (PK_Authors - 71)) | (1L << (PK_Category - 71)) | (1L << (PK_Chainable - 71)) | (1L << (PK_Definition - 71)) | (1L << (PK_DiagnosticOutputChannel - 71)) | (1L << (PK_ErrorBehaviour - 71)) | (1L << (PK_Extension - 71)) | (1L << (PK_Funs - 71)) | (1L << (PK_FunsDescription - 71)) | (1L << (PK_GlobalDeclarations - 71)) | (1L << (PK_InteractiveMode - 71)) | (1L << (PK_Language - 71)) | (1L << (PK_LeftAssoc - 71)) | (1L << (PK_License - 71)) | (1L << (PK_Named - 71)) | (1L << (PK_Name - 71)) | (1L << (PK_Notes - 71)) | (1L << (PK_Pattern - 71)) | (1L << (PK_PrintSuccess - 71)) | (1L << (PK_ProduceAssertions - 71)) | (1L << (PK_ProduceAssignments - 71)) | (1L << (PK_ProduceModels - 71)) | (1L << (PK_ProduceProofs - 71)) | (1L << (PK_ProduceUnsatAssumptions - 71)) | (1L << (PK_ProduceUnsatCores - 71)) | (1L << (PK_RandomSeed - 71)) | (1L << (PK_ReasonUnknown - 71)) | (1L << (PK_RegularOutputChannel - 71)) | (1L << (PK_ReproducibleResourceLimit - 71)) | (1L << (PK_RightAssoc - 71)) | (1L << (PK_SmtLibVersion - 71)) | (1L << (PK_Sorts - 71)) | (1L << (PK_SortsDescription - 71)) | (1L << (PK_Source - 71)) | (1L << (PK_Status - 71)) | (1L << (PK_Theories - 71)) | (1L << (PK_Values - 71)) | (1L << (PK_Verbosity - 71)) | (1L << (PK_Version - 71)))) != 0) );
			State = 1046;
			Match(ParClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Get_model_responseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Model_responseContext[] model_response() {
			return GetRuleContexts<Model_responseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Model_responseContext model_response(int i) {
			return GetRuleContext<Model_responseContext>(i);
		}
		public Get_model_responseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_get_model_response; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterGet_model_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitGet_model_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGet_model_response(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Get_model_responseContext get_model_response() {
		Get_model_responseContext _localctx = new Get_model_responseContext(Context, State);
		EnterRule(_localctx, 178, RULE_get_model_response);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1048;
			Match(ParOpen);
			State = 1052;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==ParOpen) {
				{
				{
				State = 1049;
				model_response();
				}
				}
				State = 1054;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1055;
			Match(ParClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Get_option_responseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Attribute_valueContext attribute_value() {
			return GetRuleContext<Attribute_valueContext>(0);
		}
		public Get_option_responseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_get_option_response; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterGet_option_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitGet_option_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGet_option_response(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Get_option_responseContext get_option_response() {
		Get_option_responseContext _localctx = new Get_option_responseContext(Context, State);
		EnterRule(_localctx, 180, RULE_get_option_response);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1057;
			attribute_value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Get_proof_responseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public S_exprContext s_expr() {
			return GetRuleContext<S_exprContext>(0);
		}
		public Get_proof_responseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_get_proof_response; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterGet_proof_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitGet_proof_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGet_proof_response(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Get_proof_responseContext get_proof_response() {
		Get_proof_responseContext _localctx = new Get_proof_responseContext(Context, State);
		EnterRule(_localctx, 182, RULE_get_proof_response);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1059;
			s_expr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Get_unsat_assump_responseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext[] symbol() {
			return GetRuleContexts<SymbolContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol(int i) {
			return GetRuleContext<SymbolContext>(i);
		}
		public Get_unsat_assump_responseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_get_unsat_assump_response; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterGet_unsat_assump_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitGet_unsat_assump_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGet_unsat_assump_response(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Get_unsat_assump_responseContext get_unsat_assump_response() {
		Get_unsat_assump_responseContext _localctx = new Get_unsat_assump_responseContext(Context, State);
		EnterRule(_localctx, 184, RULE_get_unsat_assump_response);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1061;
			Match(ParOpen);
			State = 1065;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QuotedSymbol) | (1L << PS_Not) | (1L << PS_Bool) | (1L << PS_ContinuedExecution) | (1L << PS_Error) | (1L << PS_False) | (1L << PS_ImmediateExit) | (1L << PS_Incomplete) | (1L << PS_Logic) | (1L << PS_Memout) | (1L << PS_Sat) | (1L << PS_Success) | (1L << PS_Theory) | (1L << PS_True) | (1L << PS_Unknown) | (1L << PS_Unsupported) | (1L << PS_Unsat))) != 0) || _la==UndefinedSymbol) {
				{
				{
				State = 1062;
				symbol();
				}
				}
				State = 1067;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1068;
			Match(ParClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Get_unsat_core_responseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext[] symbol() {
			return GetRuleContexts<SymbolContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol(int i) {
			return GetRuleContext<SymbolContext>(i);
		}
		public Get_unsat_core_responseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_get_unsat_core_response; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterGet_unsat_core_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitGet_unsat_core_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGet_unsat_core_response(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Get_unsat_core_responseContext get_unsat_core_response() {
		Get_unsat_core_responseContext _localctx = new Get_unsat_core_responseContext(Context, State);
		EnterRule(_localctx, 186, RULE_get_unsat_core_response);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1070;
			Match(ParOpen);
			State = 1074;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << QuotedSymbol) | (1L << PS_Not) | (1L << PS_Bool) | (1L << PS_ContinuedExecution) | (1L << PS_Error) | (1L << PS_False) | (1L << PS_ImmediateExit) | (1L << PS_Incomplete) | (1L << PS_Logic) | (1L << PS_Memout) | (1L << PS_Sat) | (1L << PS_Success) | (1L << PS_Theory) | (1L << PS_True) | (1L << PS_Unknown) | (1L << PS_Unsupported) | (1L << PS_Unsat))) != 0) || _la==UndefinedSymbol) {
				{
				{
				State = 1071;
				symbol();
				}
				}
				State = 1076;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1077;
			Match(ParClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Get_value_responseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Valuation_pairContext[] valuation_pair() {
			return GetRuleContexts<Valuation_pairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Valuation_pairContext valuation_pair(int i) {
			return GetRuleContext<Valuation_pairContext>(i);
		}
		public Get_value_responseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_get_value_response; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterGet_value_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitGet_value_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGet_value_response(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Get_value_responseContext get_value_response() {
		Get_value_responseContext _localctx = new Get_value_responseContext(Context, State);
		EnterRule(_localctx, 188, RULE_get_value_response);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1079;
			Match(ParOpen);
			State = 1081;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1080;
				valuation_pair();
				}
				}
				State = 1083;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ParOpen );
			State = 1085;
			Match(ParClose);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Specific_success_responseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Check_sat_responseContext check_sat_response() {
			return GetRuleContext<Check_sat_responseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Echo_responseContext echo_response() {
			return GetRuleContext<Echo_responseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Get_assertions_responseContext get_assertions_response() {
			return GetRuleContext<Get_assertions_responseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Get_assignment_responseContext get_assignment_response() {
			return GetRuleContext<Get_assignment_responseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Get_info_responseContext get_info_response() {
			return GetRuleContext<Get_info_responseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Get_model_responseContext get_model_response() {
			return GetRuleContext<Get_model_responseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Get_option_responseContext get_option_response() {
			return GetRuleContext<Get_option_responseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Get_proof_responseContext get_proof_response() {
			return GetRuleContext<Get_proof_responseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Get_unsat_assump_responseContext get_unsat_assump_response() {
			return GetRuleContext<Get_unsat_assump_responseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Get_unsat_core_responseContext get_unsat_core_response() {
			return GetRuleContext<Get_unsat_core_responseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Get_value_responseContext get_value_response() {
			return GetRuleContext<Get_value_responseContext>(0);
		}
		public Specific_success_responseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specific_success_response; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterSpecific_success_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitSpecific_success_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSpecific_success_response(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Specific_success_responseContext specific_success_response() {
		Specific_success_responseContext _localctx = new Specific_success_responseContext(Context, State);
		EnterRule(_localctx, 190, RULE_specific_success_response);
		try {
			State = 1098;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1087;
				check_sat_response();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1088;
				echo_response();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1089;
				get_assertions_response();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1090;
				get_assignment_response();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1091;
				get_info_response();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1092;
				get_model_response();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1093;
				get_option_response();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1094;
				get_proof_response();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1095;
				get_unsat_assump_response();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1096;
				get_unsat_core_response();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1097;
				get_value_response();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class General_responseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Success() { return GetToken(SMTLIBv2Parser.PS_Success, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Specific_success_responseContext specific_success_response() {
			return GetRuleContext<Specific_success_responseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Unsupported() { return GetToken(SMTLIBv2Parser.PS_Unsupported, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParOpen() { return GetToken(SMTLIBv2Parser.ParOpen, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PS_Error() { return GetToken(SMTLIBv2Parser.PS_Error, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringContext @string() {
			return GetRuleContext<StringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ParClose() { return GetToken(SMTLIBv2Parser.ParClose, 0); }
		public General_responseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_general_response; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.EnterGeneral_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISMTLIBv2Listener typedListener = listener as ISMTLIBv2Listener;
			if (typedListener != null) typedListener.ExitGeneral_response(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ISMTLIBv2Visitor<TResult> typedVisitor = visitor as ISMTLIBv2Visitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeneral_response(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public General_responseContext general_response() {
		General_responseContext _localctx = new General_responseContext(Context, State);
		EnterRule(_localctx, 192, RULE_general_response);
		try {
			State = 1108;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1100;
				Match(PS_Success);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1101;
				specific_success_response();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1102;
				Match(PS_Unsupported);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1103;
				Match(ParOpen);
				State = 1104;
				Match(PS_Error);
				State = 1105;
				@string();
				State = 1106;
				Match(ParClose);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,114,1111,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,1,0,1,0,1,0,1,1,1,1,
		1,1,1,2,1,2,1,3,1,3,3,3,205,8,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,3,7,215,
		8,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,13,3,13,
		230,8,13,1,14,1,14,1,14,1,14,1,14,3,14,237,8,14,1,15,1,15,1,15,1,15,1,
		15,5,15,244,8,15,10,15,12,15,247,9,15,1,15,3,15,250,8,15,1,16,1,16,3,16,
		254,8,16,1,17,1,17,1,17,1,17,1,17,4,17,261,8,17,11,17,12,17,262,1,17,1,
		17,3,17,267,8,17,1,18,1,18,1,18,1,18,5,18,273,8,18,10,18,12,18,276,9,18,
		1,18,3,18,279,8,18,1,19,1,19,1,19,1,19,3,19,285,8,19,1,20,1,20,1,20,1,
		20,4,20,291,8,20,11,20,12,20,292,1,20,1,20,3,20,297,8,20,1,21,1,21,1,21,
		1,21,1,21,1,21,1,21,3,21,306,8,21,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,
		23,1,23,1,23,1,24,1,24,1,24,1,24,4,24,322,8,24,11,24,12,24,323,1,24,1,
		24,3,24,328,8,24,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,4,26,
		340,8,26,11,26,12,26,341,1,26,1,26,1,26,1,26,1,26,1,26,4,26,350,8,26,11,
		26,12,26,351,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,4,26,362,8,26,11,
		26,12,26,363,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,4,26,374,8,26,11,
		26,12,26,375,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,4,26,387,8,26,
		11,26,12,26,388,1,26,1,26,1,26,1,26,1,26,1,26,1,26,4,26,398,8,26,11,26,
		12,26,399,1,26,1,26,3,26,404,8,26,1,27,1,27,1,27,1,27,5,27,410,8,27,10,
		27,12,27,413,9,27,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,29,5,29,423,8,29,
		10,29,12,29,426,9,29,1,29,1,29,1,29,1,29,1,29,1,29,5,29,434,8,29,10,29,
		12,29,437,9,29,1,29,1,29,1,29,1,29,1,29,4,29,444,8,29,11,29,12,29,445,
		1,29,5,29,449,8,29,10,29,12,29,452,9,29,1,29,1,29,3,29,456,8,29,1,30,1,
		30,1,30,1,30,1,30,4,30,463,8,30,11,30,12,30,464,1,30,1,30,1,30,1,30,4,
		30,471,8,30,11,30,12,30,472,1,30,5,30,476,8,30,10,30,12,30,479,9,30,1,
		30,1,30,1,30,3,30,484,8,30,1,31,1,31,1,31,4,31,489,8,31,11,31,12,31,490,
		1,31,1,31,1,31,1,31,1,31,4,31,498,8,31,11,31,12,31,499,1,31,1,31,1,31,
		1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,515,8,31,1,32,1,
		32,1,32,1,32,4,32,521,8,32,11,32,12,32,522,1,32,1,32,1,33,1,33,1,33,4,
		33,530,8,33,11,33,12,33,531,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
		33,1,33,1,33,3,33,545,8,33,1,34,1,34,1,34,1,34,4,34,551,8,34,11,34,12,
		34,552,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,36,1,37,
		1,37,1,37,5,37,570,8,37,10,37,12,37,573,9,37,1,37,1,37,1,38,1,38,4,38,
		579,8,38,11,38,12,38,580,1,38,1,38,1,38,1,38,1,38,1,38,4,38,589,8,38,11,
		38,12,38,590,1,38,1,38,1,38,4,38,596,8,38,11,38,12,38,597,1,38,1,38,1,
		38,3,38,603,8,38,1,39,1,39,1,39,1,39,5,39,609,8,39,10,39,12,39,612,9,39,
		1,39,1,39,1,39,1,39,1,40,1,40,1,40,5,40,621,8,40,10,40,12,40,624,9,40,
		1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,3,41,636,8,41,1,42,5,
		42,639,8,42,10,42,12,42,642,9,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,
		46,1,47,1,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,
		53,1,54,1,54,1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,60,1,
		60,1,61,1,61,1,62,1,62,1,63,1,63,1,64,1,64,1,65,1,65,1,66,1,66,1,67,1,
		67,1,68,1,68,1,69,1,69,1,70,1,70,1,71,1,71,1,72,1,72,1,73,1,73,1,74,1,
		74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,
		74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,4,
		74,735,8,74,11,74,12,74,736,1,74,1,74,1,74,4,74,742,8,74,11,74,12,74,743,
		1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,5,74,754,8,74,10,74,12,74,757,
		9,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,
		1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,4,74,783,8,74,11,
		74,12,74,784,1,74,1,74,1,74,4,74,790,8,74,11,74,12,74,791,1,74,1,74,1,
		74,1,74,1,74,1,74,1,74,1,74,5,74,802,8,74,10,74,12,74,805,9,74,1,74,1,
		74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,
		74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,
		74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,
		74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,4,74,858,8,74,11,74,12,74,859,1,
		74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,5,74,870,8,74,10,74,12,74,873,9,
		74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,
		74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,
		74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,912,8,74,1,75,1,75,
		1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,
		1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,
		1,76,3,76,945,8,76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,955,8,
		77,1,78,1,78,1,79,1,79,1,79,3,79,962,8,79,1,80,1,80,1,80,1,80,1,80,1,80,
		1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,4,80,978,8,80,11,80,12,80,979,
		1,80,1,80,1,80,4,80,985,8,80,11,80,12,80,986,1,80,1,80,1,80,3,80,992,8,
		80,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,
		81,1007,8,81,1,82,1,82,1,82,1,82,1,82,1,83,1,83,1,83,1,83,1,83,1,84,1,
		84,1,85,1,85,1,86,1,86,5,86,1025,8,86,10,86,12,86,1028,9,86,1,86,1,86,
		1,87,1,87,5,87,1034,8,87,10,87,12,87,1037,9,87,1,87,1,87,1,88,1,88,4,88,
		1043,8,88,11,88,12,88,1044,1,88,1,88,1,89,1,89,5,89,1051,8,89,10,89,12,
		89,1054,9,89,1,89,1,89,1,90,1,90,1,91,1,91,1,92,1,92,5,92,1064,8,92,10,
		92,12,92,1067,9,92,1,92,1,92,1,93,1,93,5,93,1073,8,93,10,93,12,93,1076,
		9,93,1,93,1,93,1,94,1,94,4,94,1082,8,94,11,94,12,94,1083,1,94,1,94,1,95,
		1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,3,95,1099,8,95,1,96,
		1,96,1,96,1,96,1,96,1,96,1,96,1,96,3,96,1109,8,96,1,96,0,0,97,0,2,4,6,
		8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
		56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
		102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,
		138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,
		174,176,178,180,182,184,186,188,190,192,0,7,1,0,54,66,1,0,7,22,1,0,72,
		112,3,0,58,58,64,64,66,66,2,0,11,11,19,19,2,0,9,9,12,12,3,0,16,16,20,20,
		22,22,1177,0,194,1,0,0,0,2,197,1,0,0,0,4,200,1,0,0,0,6,204,1,0,0,0,8,206,
		1,0,0,0,10,208,1,0,0,0,12,210,1,0,0,0,14,214,1,0,0,0,16,216,1,0,0,0,18,
		218,1,0,0,0,20,220,1,0,0,0,22,222,1,0,0,0,24,224,1,0,0,0,26,229,1,0,0,
		0,28,236,1,0,0,0,30,249,1,0,0,0,32,253,1,0,0,0,34,266,1,0,0,0,36,278,1,
		0,0,0,38,284,1,0,0,0,40,296,1,0,0,0,42,305,1,0,0,0,44,307,1,0,0,0,46,312,
		1,0,0,0,48,327,1,0,0,0,50,329,1,0,0,0,52,403,1,0,0,0,54,405,1,0,0,0,56,
		416,1,0,0,0,58,455,1,0,0,0,60,483,1,0,0,0,62,514,1,0,0,0,64,516,1,0,0,
		0,66,544,1,0,0,0,68,546,1,0,0,0,70,556,1,0,0,0,72,561,1,0,0,0,74,566,1,
		0,0,0,76,602,1,0,0,0,78,604,1,0,0,0,80,617,1,0,0,0,82,635,1,0,0,0,84,640,
		1,0,0,0,86,643,1,0,0,0,88,645,1,0,0,0,90,647,1,0,0,0,92,649,1,0,0,0,94,
		651,1,0,0,0,96,653,1,0,0,0,98,655,1,0,0,0,100,657,1,0,0,0,102,659,1,0,
		0,0,104,661,1,0,0,0,106,663,1,0,0,0,108,665,1,0,0,0,110,667,1,0,0,0,112,
		669,1,0,0,0,114,671,1,0,0,0,116,673,1,0,0,0,118,675,1,0,0,0,120,677,1,
		0,0,0,122,679,1,0,0,0,124,681,1,0,0,0,126,683,1,0,0,0,128,685,1,0,0,0,
		130,687,1,0,0,0,132,689,1,0,0,0,134,691,1,0,0,0,136,693,1,0,0,0,138,695,
		1,0,0,0,140,697,1,0,0,0,142,699,1,0,0,0,144,701,1,0,0,0,146,703,1,0,0,
		0,148,911,1,0,0,0,150,913,1,0,0,0,152,944,1,0,0,0,154,954,1,0,0,0,156,
		956,1,0,0,0,158,961,1,0,0,0,160,991,1,0,0,0,162,1006,1,0,0,0,164,1008,
		1,0,0,0,166,1013,1,0,0,0,168,1018,1,0,0,0,170,1020,1,0,0,0,172,1022,1,
		0,0,0,174,1031,1,0,0,0,176,1040,1,0,0,0,178,1048,1,0,0,0,180,1057,1,0,
		0,0,182,1059,1,0,0,0,184,1061,1,0,0,0,186,1070,1,0,0,0,188,1079,1,0,0,
		0,190,1098,1,0,0,0,192,1108,1,0,0,0,194,195,3,84,42,0,195,196,5,0,0,1,
		196,1,1,0,0,0,197,198,3,192,96,0,198,199,5,0,0,1,199,3,1,0,0,0,200,201,
		7,0,0,0,201,5,1,0,0,0,202,205,3,10,5,0,203,205,5,113,0,0,204,202,1,0,0,
		0,204,203,1,0,0,0,205,7,1,0,0,0,206,207,5,6,0,0,207,9,1,0,0,0,208,209,
		7,1,0,0,209,11,1,0,0,0,210,211,7,2,0,0,211,13,1,0,0,0,212,215,3,6,3,0,
		213,215,3,8,4,0,214,212,1,0,0,0,214,213,1,0,0,0,215,15,1,0,0,0,216,217,
		5,67,0,0,217,17,1,0,0,0,218,219,5,70,0,0,219,19,1,0,0,0,220,221,5,69,0,
		0,221,21,1,0,0,0,222,223,5,68,0,0,223,23,1,0,0,0,224,225,5,5,0,0,225,25,
		1,0,0,0,226,230,3,12,6,0,227,228,5,71,0,0,228,230,3,6,3,0,229,226,1,0,
		0,0,229,227,1,0,0,0,230,27,1,0,0,0,231,237,3,16,8,0,232,237,3,18,9,0,233,
		237,3,20,10,0,234,237,3,22,11,0,235,237,3,24,12,0,236,231,1,0,0,0,236,
		232,1,0,0,0,236,233,1,0,0,0,236,234,1,0,0,0,236,235,1,0,0,0,237,29,1,0,
		0,0,238,250,3,28,14,0,239,250,3,14,7,0,240,250,3,26,13,0,241,245,5,2,0,
		0,242,244,3,30,15,0,243,242,1,0,0,0,244,247,1,0,0,0,245,243,1,0,0,0,245,
		246,1,0,0,0,246,248,1,0,0,0,247,245,1,0,0,0,248,250,5,3,0,0,249,238,1,
		0,0,0,249,239,1,0,0,0,249,240,1,0,0,0,249,241,1,0,0,0,250,31,1,0,0,0,251,
		254,3,16,8,0,252,254,3,14,7,0,253,251,1,0,0,0,253,252,1,0,0,0,254,33,1,
		0,0,0,255,267,3,14,7,0,256,257,5,2,0,0,257,258,5,55,0,0,258,260,3,14,7,
		0,259,261,3,32,16,0,260,259,1,0,0,0,261,262,1,0,0,0,262,260,1,0,0,0,262,
		263,1,0,0,0,263,264,1,0,0,0,264,265,5,3,0,0,265,267,1,0,0,0,266,255,1,
		0,0,0,266,256,1,0,0,0,267,35,1,0,0,0,268,279,3,28,14,0,269,279,3,14,7,
		0,270,274,5,2,0,0,271,273,3,30,15,0,272,271,1,0,0,0,273,276,1,0,0,0,274,
		272,1,0,0,0,274,275,1,0,0,0,275,277,1,0,0,0,276,274,1,0,0,0,277,279,5,
		3,0,0,278,268,1,0,0,0,278,269,1,0,0,0,278,270,1,0,0,0,279,37,1,0,0,0,280,
		285,3,26,13,0,281,282,3,26,13,0,282,283,3,36,18,0,283,285,1,0,0,0,284,
		280,1,0,0,0,284,281,1,0,0,0,285,39,1,0,0,0,286,297,3,34,17,0,287,288,5,
		2,0,0,288,290,3,34,17,0,289,291,3,40,20,0,290,289,1,0,0,0,291,292,1,0,
		0,0,292,290,1,0,0,0,292,293,1,0,0,0,293,294,1,0,0,0,294,295,5,3,0,0,295,
		297,1,0,0,0,296,286,1,0,0,0,296,287,1,0,0,0,297,41,1,0,0,0,298,306,3,34,
		17,0,299,300,5,2,0,0,300,301,5,56,0,0,301,302,3,34,17,0,302,303,3,40,20,
		0,303,304,5,3,0,0,304,306,1,0,0,0,305,298,1,0,0,0,305,299,1,0,0,0,306,
		43,1,0,0,0,307,308,5,2,0,0,308,309,3,14,7,0,309,310,3,52,26,0,310,311,
		5,3,0,0,311,45,1,0,0,0,312,313,5,2,0,0,313,314,3,14,7,0,314,315,3,40,20,
		0,315,316,5,3,0,0,316,47,1,0,0,0,317,328,3,14,7,0,318,319,5,2,0,0,319,
		321,3,14,7,0,320,322,3,14,7,0,321,320,1,0,0,0,322,323,1,0,0,0,323,321,
		1,0,0,0,323,324,1,0,0,0,324,325,1,0,0,0,325,326,5,3,0,0,326,328,1,0,0,
		0,327,317,1,0,0,0,327,318,1,0,0,0,328,49,1,0,0,0,329,330,5,2,0,0,330,331,
		3,48,24,0,331,332,3,52,26,0,332,333,5,3,0,0,333,51,1,0,0,0,334,404,3,28,
		14,0,335,404,3,42,21,0,336,337,5,2,0,0,337,339,3,42,21,0,338,340,3,52,
		26,0,339,338,1,0,0,0,340,341,1,0,0,0,341,339,1,0,0,0,341,342,1,0,0,0,342,
		343,1,0,0,0,343,344,5,3,0,0,344,404,1,0,0,0,345,346,5,2,0,0,346,347,5,
		62,0,0,347,349,5,2,0,0,348,350,3,44,22,0,349,348,1,0,0,0,350,351,1,0,0,
		0,351,349,1,0,0,0,351,352,1,0,0,0,352,353,1,0,0,0,353,354,5,3,0,0,354,
		355,3,52,26,0,355,356,5,3,0,0,356,404,1,0,0,0,357,358,5,2,0,0,358,359,
		5,61,0,0,359,361,5,2,0,0,360,362,3,46,23,0,361,360,1,0,0,0,362,363,1,0,
		0,0,363,361,1,0,0,0,363,364,1,0,0,0,364,365,1,0,0,0,365,366,5,3,0,0,366,
		367,3,52,26,0,367,368,5,3,0,0,368,404,1,0,0,0,369,370,5,2,0,0,370,371,
		5,59,0,0,371,373,5,2,0,0,372,374,3,46,23,0,373,372,1,0,0,0,374,375,1,0,
		0,0,375,373,1,0,0,0,375,376,1,0,0,0,376,377,1,0,0,0,377,378,5,3,0,0,378,
		379,3,52,26,0,379,380,5,3,0,0,380,404,1,0,0,0,381,382,5,2,0,0,382,383,
		5,63,0,0,383,384,3,52,26,0,384,386,5,2,0,0,385,387,3,50,25,0,386,385,1,
		0,0,0,387,388,1,0,0,0,388,386,1,0,0,0,388,389,1,0,0,0,389,390,1,0,0,0,
		390,391,5,3,0,0,391,392,5,3,0,0,392,404,1,0,0,0,393,394,5,2,0,0,394,395,
		5,54,0,0,395,397,3,52,26,0,396,398,3,38,19,0,397,396,1,0,0,0,398,399,1,
		0,0,0,399,397,1,0,0,0,399,400,1,0,0,0,400,401,1,0,0,0,401,402,5,3,0,0,
		402,404,1,0,0,0,403,334,1,0,0,0,403,335,1,0,0,0,403,336,1,0,0,0,403,345,
		1,0,0,0,403,357,1,0,0,0,403,369,1,0,0,0,403,381,1,0,0,0,403,393,1,0,0,
		0,404,53,1,0,0,0,405,406,5,2,0,0,406,407,3,34,17,0,407,411,3,16,8,0,408,
		410,3,38,19,0,409,408,1,0,0,0,410,413,1,0,0,0,411,409,1,0,0,0,411,412,
		1,0,0,0,412,414,1,0,0,0,413,411,1,0,0,0,414,415,5,3,0,0,415,55,1,0,0,0,
		416,417,7,3,0,0,417,57,1,0,0,0,418,419,5,2,0,0,419,420,3,28,14,0,420,424,
		3,40,20,0,421,423,3,38,19,0,422,421,1,0,0,0,423,426,1,0,0,0,424,422,1,
		0,0,0,424,425,1,0,0,0,425,427,1,0,0,0,426,424,1,0,0,0,427,428,5,3,0,0,
		428,456,1,0,0,0,429,430,5,2,0,0,430,431,3,56,28,0,431,435,3,40,20,0,432,
		434,3,38,19,0,433,432,1,0,0,0,434,437,1,0,0,0,435,433,1,0,0,0,435,436,
		1,0,0,0,436,438,1,0,0,0,437,435,1,0,0,0,438,439,5,3,0,0,439,456,1,0,0,
		0,440,441,5,2,0,0,441,443,3,34,17,0,442,444,3,40,20,0,443,442,1,0,0,0,
		444,445,1,0,0,0,445,443,1,0,0,0,445,446,1,0,0,0,446,450,1,0,0,0,447,449,
		3,38,19,0,448,447,1,0,0,0,449,452,1,0,0,0,450,448,1,0,0,0,450,451,1,0,
		0,0,451,453,1,0,0,0,452,450,1,0,0,0,453,454,5,3,0,0,454,456,1,0,0,0,455,
		418,1,0,0,0,455,429,1,0,0,0,455,440,1,0,0,0,456,59,1,0,0,0,457,484,3,58,
		29,0,458,459,5,2,0,0,459,460,5,65,0,0,460,462,5,2,0,0,461,463,3,14,7,0,
		462,461,1,0,0,0,463,464,1,0,0,0,464,462,1,0,0,0,464,465,1,0,0,0,465,466,
		1,0,0,0,466,467,5,3,0,0,467,468,5,2,0,0,468,470,3,34,17,0,469,471,3,40,
		20,0,470,469,1,0,0,0,471,472,1,0,0,0,472,470,1,0,0,0,472,473,1,0,0,0,473,
		477,1,0,0,0,474,476,3,38,19,0,475,474,1,0,0,0,476,479,1,0,0,0,477,475,
		1,0,0,0,477,478,1,0,0,0,478,480,1,0,0,0,479,477,1,0,0,0,480,481,5,3,0,
		0,481,482,5,3,0,0,482,484,1,0,0,0,483,457,1,0,0,0,483,458,1,0,0,0,484,
		61,1,0,0,0,485,486,5,105,0,0,486,488,5,2,0,0,487,489,3,54,27,0,488,487,
		1,0,0,0,489,490,1,0,0,0,490,488,1,0,0,0,490,491,1,0,0,0,491,492,1,0,0,
		0,492,493,5,3,0,0,493,515,1,0,0,0,494,495,5,81,0,0,495,497,5,2,0,0,496,
		498,3,60,30,0,497,496,1,0,0,0,498,499,1,0,0,0,499,497,1,0,0,0,499,500,
		1,0,0,0,500,501,1,0,0,0,501,502,5,3,0,0,502,515,1,0,0,0,503,504,5,106,
		0,0,504,515,3,24,12,0,505,506,5,82,0,0,506,515,3,24,12,0,507,508,5,77,
		0,0,508,515,3,24,12,0,509,510,5,110,0,0,510,515,3,24,12,0,511,512,5,90,
		0,0,512,515,3,24,12,0,513,515,3,38,19,0,514,485,1,0,0,0,514,494,1,0,0,
		0,514,503,1,0,0,0,514,505,1,0,0,0,514,507,1,0,0,0,514,509,1,0,0,0,514,
		511,1,0,0,0,514,513,1,0,0,0,515,63,1,0,0,0,516,517,5,2,0,0,517,518,5,18,
		0,0,518,520,3,14,7,0,519,521,3,62,31,0,520,519,1,0,0,0,521,522,1,0,0,0,
		522,520,1,0,0,0,522,523,1,0,0,0,523,524,1,0,0,0,524,525,5,3,0,0,525,65,
		1,0,0,0,526,527,5,109,0,0,527,529,5,2,0,0,528,530,3,14,7,0,529,528,1,0,
		0,0,530,531,1,0,0,0,531,529,1,0,0,0,531,532,1,0,0,0,532,533,1,0,0,0,533,
		534,5,3,0,0,534,545,1,0,0,0,535,536,5,85,0,0,536,545,3,24,12,0,537,538,
		5,80,0,0,538,545,3,24,12,0,539,540,5,110,0,0,540,545,3,24,12,0,541,542,
		5,90,0,0,542,545,3,24,12,0,543,545,3,38,19,0,544,526,1,0,0,0,544,535,1,
		0,0,0,544,537,1,0,0,0,544,539,1,0,0,0,544,541,1,0,0,0,544,543,1,0,0,0,
		545,67,1,0,0,0,546,547,5,2,0,0,547,548,5,14,0,0,548,550,3,14,7,0,549,551,
		3,66,33,0,550,549,1,0,0,0,551,552,1,0,0,0,552,550,1,0,0,0,552,553,1,0,
		0,0,553,554,1,0,0,0,554,555,5,3,0,0,555,69,1,0,0,0,556,557,5,2,0,0,557,
		558,3,14,7,0,558,559,3,16,8,0,559,560,5,3,0,0,560,71,1,0,0,0,561,562,5,
		2,0,0,562,563,3,14,7,0,563,564,3,40,20,0,564,565,5,3,0,0,565,73,1,0,0,
		0,566,567,5,2,0,0,567,571,3,14,7,0,568,570,3,72,36,0,569,568,1,0,0,0,570,
		573,1,0,0,0,571,569,1,0,0,0,571,572,1,0,0,0,572,574,1,0,0,0,573,571,1,
		0,0,0,574,575,5,3,0,0,575,75,1,0,0,0,576,578,5,2,0,0,577,579,3,74,37,0,
		578,577,1,0,0,0,579,580,1,0,0,0,580,578,1,0,0,0,580,581,1,0,0,0,581,582,
		1,0,0,0,582,583,5,3,0,0,583,603,1,0,0,0,584,585,5,2,0,0,585,586,5,65,0,
		0,586,588,5,2,0,0,587,589,3,14,7,0,588,587,1,0,0,0,589,590,1,0,0,0,590,
		588,1,0,0,0,590,591,1,0,0,0,591,592,1,0,0,0,592,593,5,3,0,0,593,595,5,
		2,0,0,594,596,3,74,37,0,595,594,1,0,0,0,596,597,1,0,0,0,597,595,1,0,0,
		0,597,598,1,0,0,0,598,599,1,0,0,0,599,600,5,3,0,0,600,601,5,3,0,0,601,
		603,1,0,0,0,602,576,1,0,0,0,602,584,1,0,0,0,603,77,1,0,0,0,604,605,5,2,
		0,0,605,606,3,14,7,0,606,610,5,2,0,0,607,609,3,46,23,0,608,607,1,0,0,0,
		609,612,1,0,0,0,610,608,1,0,0,0,610,611,1,0,0,0,611,613,1,0,0,0,612,610,
		1,0,0,0,613,614,5,3,0,0,614,615,3,40,20,0,615,616,5,3,0,0,616,79,1,0,0,
		0,617,618,3,14,7,0,618,622,5,2,0,0,619,621,3,46,23,0,620,619,1,0,0,0,621,
		624,1,0,0,0,622,620,1,0,0,0,622,623,1,0,0,0,623,625,1,0,0,0,624,622,1,
		0,0,0,625,626,5,3,0,0,626,627,3,40,20,0,627,628,3,52,26,0,628,81,1,0,0,
		0,629,636,3,14,7,0,630,631,5,2,0,0,631,632,5,7,0,0,632,633,3,14,7,0,633,
		634,5,3,0,0,634,636,1,0,0,0,635,629,1,0,0,0,635,630,1,0,0,0,636,83,1,0,
		0,0,637,639,3,148,74,0,638,637,1,0,0,0,639,642,1,0,0,0,640,638,1,0,0,0,
		640,641,1,0,0,0,641,85,1,0,0,0,642,640,1,0,0,0,643,644,5,23,0,0,644,87,
		1,0,0,0,645,646,5,24,0,0,646,89,1,0,0,0,647,648,5,25,0,0,648,91,1,0,0,
		0,649,650,5,26,0,0,650,93,1,0,0,0,651,652,5,27,0,0,652,95,1,0,0,0,653,
		654,5,28,0,0,654,97,1,0,0,0,655,656,5,29,0,0,656,99,1,0,0,0,657,658,5,
		30,0,0,658,101,1,0,0,0,659,660,5,31,0,0,660,103,1,0,0,0,661,662,5,32,0,
		0,662,105,1,0,0,0,663,664,5,33,0,0,664,107,1,0,0,0,665,666,5,34,0,0,666,
		109,1,0,0,0,667,668,5,35,0,0,668,111,1,0,0,0,669,670,5,36,0,0,670,113,
		1,0,0,0,671,672,5,37,0,0,672,115,1,0,0,0,673,674,5,38,0,0,674,117,1,0,
		0,0,675,676,5,39,0,0,676,119,1,0,0,0,677,678,5,40,0,0,678,121,1,0,0,0,
		679,680,5,41,0,0,680,123,1,0,0,0,681,682,5,42,0,0,682,125,1,0,0,0,683,
		684,5,43,0,0,684,127,1,0,0,0,685,686,5,44,0,0,686,129,1,0,0,0,687,688,
		5,45,0,0,688,131,1,0,0,0,689,690,5,46,0,0,690,133,1,0,0,0,691,692,5,47,
		0,0,692,135,1,0,0,0,693,694,5,48,0,0,694,137,1,0,0,0,695,696,5,49,0,0,
		696,139,1,0,0,0,697,698,5,50,0,0,698,141,1,0,0,0,699,700,5,51,0,0,700,
		143,1,0,0,0,701,702,5,52,0,0,702,145,1,0,0,0,703,704,5,53,0,0,704,147,
		1,0,0,0,705,706,5,2,0,0,706,707,3,86,43,0,707,708,3,52,26,0,708,709,5,
		3,0,0,709,912,1,0,0,0,710,711,5,2,0,0,711,712,3,88,44,0,712,713,5,3,0,
		0,713,912,1,0,0,0,714,715,5,2,0,0,715,716,3,90,45,0,716,717,5,3,0,0,717,
		912,1,0,0,0,718,719,5,2,0,0,719,720,3,92,46,0,720,721,3,14,7,0,721,722,
		3,40,20,0,722,723,5,3,0,0,723,912,1,0,0,0,724,725,5,2,0,0,725,726,3,94,
		47,0,726,727,3,14,7,0,727,728,3,76,38,0,728,729,5,3,0,0,729,912,1,0,0,
		0,730,731,5,2,0,0,731,732,3,96,48,0,732,734,5,2,0,0,733,735,3,70,35,0,
		734,733,1,0,0,0,735,736,1,0,0,0,736,734,1,0,0,0,736,737,1,0,0,0,737,738,
		1,0,0,0,738,739,5,3,0,0,739,741,5,2,0,0,740,742,3,76,38,0,741,740,1,0,
		0,0,742,743,1,0,0,0,743,741,1,0,0,0,743,744,1,0,0,0,744,745,1,0,0,0,745,
		746,5,3,0,0,746,747,5,3,0,0,747,912,1,0,0,0,748,749,5,2,0,0,749,750,3,
		98,49,0,750,751,3,14,7,0,751,755,5,2,0,0,752,754,3,40,20,0,753,752,1,0,
		0,0,754,757,1,0,0,0,755,753,1,0,0,0,755,756,1,0,0,0,756,758,1,0,0,0,757,
		755,1,0,0,0,758,759,5,3,0,0,759,760,3,40,20,0,760,761,5,3,0,0,761,912,
		1,0,0,0,762,763,5,2,0,0,763,764,3,100,50,0,764,765,3,14,7,0,765,766,3,
		16,8,0,766,767,5,3,0,0,767,912,1,0,0,0,768,769,5,2,0,0,769,770,3,102,51,
		0,770,771,3,80,40,0,771,772,5,3,0,0,772,912,1,0,0,0,773,774,5,2,0,0,774,
		775,3,104,52,0,775,776,3,80,40,0,776,777,5,3,0,0,777,912,1,0,0,0,778,779,
		5,2,0,0,779,780,3,106,53,0,780,782,5,2,0,0,781,783,3,78,39,0,782,781,1,
		0,0,0,783,784,1,0,0,0,784,782,1,0,0,0,784,785,1,0,0,0,785,786,1,0,0,0,
		786,787,5,3,0,0,787,789,5,2,0,0,788,790,3,52,26,0,789,788,1,0,0,0,790,
		791,1,0,0,0,791,789,1,0,0,0,791,792,1,0,0,0,792,793,1,0,0,0,793,794,5,
		3,0,0,794,795,5,3,0,0,795,912,1,0,0,0,796,797,5,2,0,0,797,798,3,108,54,
		0,798,799,3,14,7,0,799,803,5,2,0,0,800,802,3,14,7,0,801,800,1,0,0,0,802,
		805,1,0,0,0,803,801,1,0,0,0,803,804,1,0,0,0,804,806,1,0,0,0,805,803,1,
		0,0,0,806,807,5,3,0,0,807,808,3,40,20,0,808,809,5,3,0,0,809,912,1,0,0,
		0,810,811,5,2,0,0,811,812,3,110,55,0,812,813,3,24,12,0,813,814,5,3,0,0,
		814,912,1,0,0,0,815,816,5,2,0,0,816,817,3,112,56,0,817,818,5,3,0,0,818,
		912,1,0,0,0,819,820,5,2,0,0,820,821,3,114,57,0,821,822,5,3,0,0,822,912,
		1,0,0,0,823,824,5,2,0,0,824,825,3,116,58,0,825,826,5,3,0,0,826,912,1,0,
		0,0,827,828,5,2,0,0,828,829,3,118,59,0,829,830,3,154,77,0,830,831,5,3,
		0,0,831,912,1,0,0,0,832,833,5,2,0,0,833,834,3,120,60,0,834,835,5,3,0,0,
		835,912,1,0,0,0,836,837,5,2,0,0,837,838,3,122,61,0,838,839,3,26,13,0,839,
		840,5,3,0,0,840,912,1,0,0,0,841,842,5,2,0,0,842,843,3,124,62,0,843,844,
		5,3,0,0,844,912,1,0,0,0,845,846,5,2,0,0,846,847,3,126,63,0,847,848,5,3,
		0,0,848,912,1,0,0,0,849,850,5,2,0,0,850,851,3,128,64,0,851,852,5,3,0,0,
		852,912,1,0,0,0,853,854,5,2,0,0,854,855,3,130,65,0,855,857,5,2,0,0,856,
		858,3,52,26,0,857,856,1,0,0,0,858,859,1,0,0,0,859,857,1,0,0,0,859,860,
		1,0,0,0,860,861,1,0,0,0,861,862,5,3,0,0,862,863,5,3,0,0,863,912,1,0,0,
		0,864,865,5,2,0,0,865,866,3,132,66,0,866,867,3,14,7,0,867,871,5,2,0,0,
		868,870,3,46,23,0,869,868,1,0,0,0,870,873,1,0,0,0,871,869,1,0,0,0,871,
		872,1,0,0,0,872,874,1,0,0,0,873,871,1,0,0,0,874,875,5,3,0,0,875,876,3,
		52,26,0,876,877,5,3,0,0,877,912,1,0,0,0,878,879,5,2,0,0,879,880,3,134,
		67,0,880,881,3,16,8,0,881,882,5,3,0,0,882,912,1,0,0,0,883,884,5,2,0,0,
		884,885,3,136,68,0,885,886,3,16,8,0,886,887,5,3,0,0,887,912,1,0,0,0,888,
		889,5,2,0,0,889,890,3,138,69,0,890,891,5,3,0,0,891,912,1,0,0,0,892,893,
		5,2,0,0,893,894,3,140,70,0,894,895,5,3,0,0,895,912,1,0,0,0,896,897,5,2,
		0,0,897,898,3,142,71,0,898,899,3,38,19,0,899,900,5,3,0,0,900,912,1,0,0,
		0,901,902,5,2,0,0,902,903,3,144,72,0,903,904,3,14,7,0,904,905,5,3,0,0,
		905,912,1,0,0,0,906,907,5,2,0,0,907,908,3,146,73,0,908,909,3,152,76,0,
		909,910,5,3,0,0,910,912,1,0,0,0,911,705,1,0,0,0,911,710,1,0,0,0,911,714,
		1,0,0,0,911,718,1,0,0,0,911,724,1,0,0,0,911,730,1,0,0,0,911,748,1,0,0,
		0,911,762,1,0,0,0,911,768,1,0,0,0,911,773,1,0,0,0,911,778,1,0,0,0,911,
		796,1,0,0,0,911,810,1,0,0,0,911,815,1,0,0,0,911,819,1,0,0,0,911,823,1,
		0,0,0,911,827,1,0,0,0,911,832,1,0,0,0,911,836,1,0,0,0,911,841,1,0,0,0,
		911,845,1,0,0,0,911,849,1,0,0,0,911,853,1,0,0,0,911,864,1,0,0,0,911,878,
		1,0,0,0,911,883,1,0,0,0,911,888,1,0,0,0,911,892,1,0,0,0,911,896,1,0,0,
		0,911,901,1,0,0,0,911,906,1,0,0,0,912,149,1,0,0,0,913,914,7,4,0,0,914,
		151,1,0,0,0,915,916,5,78,0,0,916,945,3,24,12,0,917,918,5,83,0,0,918,945,
		3,150,75,0,919,920,5,84,0,0,920,945,3,150,75,0,921,922,5,92,0,0,922,945,
		3,150,75,0,923,924,5,93,0,0,924,945,3,150,75,0,925,926,5,94,0,0,926,945,
		3,150,75,0,927,928,5,95,0,0,928,945,3,150,75,0,929,930,5,96,0,0,930,945,
		3,150,75,0,931,932,5,97,0,0,932,945,3,150,75,0,933,934,5,98,0,0,934,945,
		3,150,75,0,935,936,5,99,0,0,936,945,3,16,8,0,937,938,5,101,0,0,938,945,
		3,24,12,0,939,940,5,102,0,0,940,945,3,16,8,0,941,942,5,111,0,0,942,945,
		3,16,8,0,943,945,3,38,19,0,944,915,1,0,0,0,944,917,1,0,0,0,944,919,1,0,
		0,0,944,921,1,0,0,0,944,923,1,0,0,0,944,925,1,0,0,0,944,927,1,0,0,0,944,
		929,1,0,0,0,944,931,1,0,0,0,944,933,1,0,0,0,944,935,1,0,0,0,944,937,1,
		0,0,0,944,939,1,0,0,0,944,941,1,0,0,0,944,943,1,0,0,0,945,153,1,0,0,0,
		946,955,5,72,0,0,947,955,5,73,0,0,948,955,5,74,0,0,949,955,5,79,0,0,950,
		955,5,89,0,0,951,955,5,100,0,0,952,955,5,112,0,0,953,955,3,26,13,0,954,
		946,1,0,0,0,954,947,1,0,0,0,954,948,1,0,0,0,954,949,1,0,0,0,954,950,1,
		0,0,0,954,951,1,0,0,0,954,952,1,0,0,0,954,953,1,0,0,0,955,155,1,0,0,0,
		956,957,7,5,0,0,957,157,1,0,0,0,958,962,5,15,0,0,959,962,5,13,0,0,960,
		962,3,30,15,0,961,958,1,0,0,0,961,959,1,0,0,0,961,960,1,0,0,0,962,159,
		1,0,0,0,963,964,5,2,0,0,964,965,5,31,0,0,965,966,3,80,40,0,966,967,5,3,
		0,0,967,992,1,0,0,0,968,969,5,2,0,0,969,970,5,32,0,0,970,971,3,80,40,0,
		971,972,5,3,0,0,972,992,1,0,0,0,973,974,5,2,0,0,974,975,5,33,0,0,975,977,
		5,2,0,0,976,978,3,78,39,0,977,976,1,0,0,0,978,979,1,0,0,0,979,977,1,0,
		0,0,979,980,1,0,0,0,980,981,1,0,0,0,981,982,5,3,0,0,982,984,5,2,0,0,983,
		985,3,52,26,0,984,983,1,0,0,0,985,986,1,0,0,0,986,984,1,0,0,0,986,987,
		1,0,0,0,987,988,1,0,0,0,988,989,5,3,0,0,989,990,5,3,0,0,990,992,1,0,0,
		0,991,963,1,0,0,0,991,968,1,0,0,0,991,973,1,0,0,0,992,161,1,0,0,0,993,
		994,5,73,0,0,994,1007,3,16,8,0,995,996,5,74,0,0,996,1007,3,24,12,0,997,
		998,5,79,0,0,998,1007,3,156,78,0,999,1000,5,89,0,0,1000,1007,3,24,12,0,
		1001,1002,5,100,0,0,1002,1007,3,158,79,0,1003,1004,5,112,0,0,1004,1007,
		3,24,12,0,1005,1007,3,38,19,0,1006,993,1,0,0,0,1006,995,1,0,0,0,1006,997,
		1,0,0,0,1006,999,1,0,0,0,1006,1001,1,0,0,0,1006,1003,1,0,0,0,1006,1005,
		1,0,0,0,1007,163,1,0,0,0,1008,1009,5,2,0,0,1009,1010,3,52,26,0,1010,1011,
		3,52,26,0,1011,1012,5,3,0,0,1012,165,1,0,0,0,1013,1014,5,2,0,0,1014,1015,
		3,14,7,0,1015,1016,3,150,75,0,1016,1017,5,3,0,0,1017,167,1,0,0,0,1018,
		1019,7,6,0,0,1019,169,1,0,0,0,1020,1021,3,24,12,0,1021,171,1,0,0,0,1022,
		1026,5,2,0,0,1023,1025,3,52,26,0,1024,1023,1,0,0,0,1025,1028,1,0,0,0,1026,
		1024,1,0,0,0,1026,1027,1,0,0,0,1027,1029,1,0,0,0,1028,1026,1,0,0,0,1029,
		1030,5,3,0,0,1030,173,1,0,0,0,1031,1035,5,2,0,0,1032,1034,3,166,83,0,1033,
		1032,1,0,0,0,1034,1037,1,0,0,0,1035,1033,1,0,0,0,1035,1036,1,0,0,0,1036,
		1038,1,0,0,0,1037,1035,1,0,0,0,1038,1039,5,3,0,0,1039,175,1,0,0,0,1040,
		1042,5,2,0,0,1041,1043,3,162,81,0,1042,1041,1,0,0,0,1043,1044,1,0,0,0,
		1044,1042,1,0,0,0,1044,1045,1,0,0,0,1045,1046,1,0,0,0,1046,1047,5,3,0,
		0,1047,177,1,0,0,0,1048,1052,5,2,0,0,1049,1051,3,160,80,0,1050,1049,1,
		0,0,0,1051,1054,1,0,0,0,1052,1050,1,0,0,0,1052,1053,1,0,0,0,1053,1055,
		1,0,0,0,1054,1052,1,0,0,0,1055,1056,5,3,0,0,1056,179,1,0,0,0,1057,1058,
		3,36,18,0,1058,181,1,0,0,0,1059,1060,3,30,15,0,1060,183,1,0,0,0,1061,1065,
		5,2,0,0,1062,1064,3,14,7,0,1063,1062,1,0,0,0,1064,1067,1,0,0,0,1065,1063,
		1,0,0,0,1065,1066,1,0,0,0,1066,1068,1,0,0,0,1067,1065,1,0,0,0,1068,1069,
		5,3,0,0,1069,185,1,0,0,0,1070,1074,5,2,0,0,1071,1073,3,14,7,0,1072,1071,
		1,0,0,0,1073,1076,1,0,0,0,1074,1072,1,0,0,0,1074,1075,1,0,0,0,1075,1077,
		1,0,0,0,1076,1074,1,0,0,0,1077,1078,5,3,0,0,1078,187,1,0,0,0,1079,1081,
		5,2,0,0,1080,1082,3,164,82,0,1081,1080,1,0,0,0,1082,1083,1,0,0,0,1083,
		1081,1,0,0,0,1083,1084,1,0,0,0,1084,1085,1,0,0,0,1085,1086,5,3,0,0,1086,
		189,1,0,0,0,1087,1099,3,168,84,0,1088,1099,3,170,85,0,1089,1099,3,172,
		86,0,1090,1099,3,174,87,0,1091,1099,3,176,88,0,1092,1099,3,178,89,0,1093,
		1099,3,180,90,0,1094,1099,3,182,91,0,1095,1099,3,184,92,0,1096,1099,3,
		186,93,0,1097,1099,3,188,94,0,1098,1087,1,0,0,0,1098,1088,1,0,0,0,1098,
		1089,1,0,0,0,1098,1090,1,0,0,0,1098,1091,1,0,0,0,1098,1092,1,0,0,0,1098,
		1093,1,0,0,0,1098,1094,1,0,0,0,1098,1095,1,0,0,0,1098,1096,1,0,0,0,1098,
		1097,1,0,0,0,1099,191,1,0,0,0,1100,1109,5,17,0,0,1101,1109,3,190,95,0,
		1102,1109,5,21,0,0,1103,1104,5,2,0,0,1104,1105,5,10,0,0,1105,1106,3,24,
		12,0,1106,1107,5,3,0,0,1107,1109,1,0,0,0,1108,1100,1,0,0,0,1108,1101,1,
		0,0,0,1108,1102,1,0,0,0,1108,1103,1,0,0,0,1109,193,1,0,0,0,75,204,214,
		229,236,245,249,253,262,266,274,278,284,292,296,305,323,327,341,351,363,
		375,388,399,403,411,424,435,445,450,455,464,472,477,483,490,499,514,522,
		531,544,552,571,580,590,597,602,610,622,635,640,736,743,755,784,791,803,
		859,871,911,944,954,961,979,986,991,1006,1026,1035,1044,1052,1065,1074,
		1083,1098,1108
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace SMTLIB2Parser
